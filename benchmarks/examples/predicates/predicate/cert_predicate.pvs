% This file is automatically generated by PRECiSA 

cert_predicate: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING predicate_fp
IMPORTING predicate

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: Dmul(X, Y)
% Control Flow: Stable
mul_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
finite?(X) AND finite?(Y) AND
abs(DtoR(X) - r_X)<=e_X AND abs(DtoR(Y) - r_Y)<=e_Y
IMPLIES
abs(DtoR(mul_fp(X, Y)) - mul(r_X, r_Y))<=aerr_ulp_dp_mul(r_X, e_X, r_Y, e_Y)


%|- mul_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: 1, 2
% Control Flow: Stable
test_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
finite?(X) AND finite?(Y) AND finite?(X) AND finite?(Y) AND
abs(DtoR(X) - r_X)<=e_X AND abs(DtoR(Y) - r_Y)<=e_Y
AND (((NOT(positive(r_X, r_Y)) AND TRUE) AND (NOT(positive_fp(X, Y)) AND TRUE)) OR ((positive(r_X, r_Y) AND TRUE) AND (positive_fp(X, Y) AND TRUE)))
IMPLIES
abs(test_fp(X, Y) - test(r_X, r_Y))<=max((0 / 1), (0 / 1))


%|- test_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_predicate