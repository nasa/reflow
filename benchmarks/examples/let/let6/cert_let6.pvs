% This file is automatically generated by PRECiSA 

cert_let6: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING let6_fp
IMPORTING let6

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: Dmul(X, 2)
% Control Flow: Stable
f_fp_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: double):
finite?(X) AND
abs(DtoR(X) - r_X)<=e_X
IMPLIES
abs(DtoR(f_fp(X)) - f(r_X))<=aerr_ulp_dp_mul(r_X, e_X, 2, (0 / 1))


%|- f_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET A:double=Dadd(X, Y)
                         IN LET B:double=f_fp(A)
                            IN LET C:double=Dadd(A, B)
                               IN Dadd(C, B)
% Control Flow: Stable
g_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
finite?(X) AND finite?(Y) AND
abs(DtoR(X) - r_X)<=e_X AND abs(DtoR(Y) - r_Y)<=e_Y
IMPLIES
abs(DtoR(g_fp(X, Y)) - g(r_X, r_Y))<=LET A:real=(r_X + r_Y),
                                         Err_A:real=aerr_ulp_dp_add(r_X, e_X, r_Y, e_Y)
                                     IN LET B:real=(r_A * 2),
                                            Err_B:real=aerr_ulp_dp_mul(r_A, Err_A, 2, (0 / 1))
                                        IN LET C:real=(r_A + r_B),
                                               Err_C:real=aerr_ulp_dp_add(r_A, Err_A, r_B, Err_B)
                                           IN aerr_ulp_dp_add(r_C, Err_C, r_B, Err_B)


%|- g_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_let6