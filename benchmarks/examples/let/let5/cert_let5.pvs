% This file is automatically generated by PRECiSA 

cert_let5: THEORY
BEGIN
IMPORTING PRECiSA@strategies, float@extended_float_converter, let5_fp,let5

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: 1, 2, 3, 4
% Control Flow: Stable
quadrant_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
abs(safe_prjct_double(X) - r_X)<=e_X AND abs(safe_prjct_double(Y) - r_Y)<=e_Y
AND (((((r_X <= 0) AND (0 <= r_Y)) AND NOT(((0 <= r_X) AND (0 <= r_Y)))) AND (((X <= integerToDouble(0)) AND (integerToDouble(0) <= Y)) AND NOT(((integerToDouble(0) <= X) AND (integerToDouble(0) <= Y))))) OR ((NOT((r_X <= 0)) AND (NOT(((r_X <= 0) AND (0 <= r_Y))) AND NOT(((0 <= r_X) AND (0 <= r_Y))))) AND (NOT((X <= integerToDouble(0))) AND (NOT(((X <= integerToDouble(0)) AND (integerToDouble(0) <= Y))) AND NOT(((integerToDouble(0) <= X) AND (integerToDouble(0) <= Y)))))) OR (((0 <= r_X) AND (0 <= r_Y)) AND ((integerToDouble(0) <= X) AND (integerToDouble(0) <= Y))) OR (((r_X <= 0) AND (NOT(((r_X <= 0) AND (0 <= r_Y))) AND NOT(((0 <= r_X) AND (0 <= r_Y))))) AND ((X <= integerToDouble(0)) AND (NOT(((X <= integerToDouble(0)) AND (integerToDouble(0) <= Y))) AND NOT(((integerToDouble(0) <= X) AND (integerToDouble(0) <= Y)))))))
IMPLIES
abs(quadrant_fp(X, Y) - quadrant(r_X, r_Y))<=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))


%|- quadrant_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_0 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=1,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=1,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_1 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=1,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=2,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_1: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_2 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=1,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=3,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_2: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_3 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=1,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=4,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_3: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_4 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=2,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=1,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_4: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_5 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=2,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=2,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_5: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_6 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=2,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=3,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_6: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_7 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=2,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=4,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_7: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_8 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=3,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=1,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_8: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_9 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=3,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=2,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_9: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_10 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=3,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=3,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_10: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_11 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=3,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=4,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_11: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_12 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=4,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=1,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_12: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_13 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=4,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=2,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_13: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_14 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=4,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=3,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_14: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET THIS_x:double=sub_double(P_V1_x, S_x)
                         IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                            IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                               IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                  IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                     IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                        IN -2, LET THIS_x:double=sub_double(P_V1_x, S_x)
                                               IN LET THIS_y:double=sub_double(P_V1_y, S_y)
                                                  IN LET NEXT_x:double=sub_double(P_V2_x, S_x)
                                                     IN LET NEXT_y:double=sub_double(P_V2_y, S_y)
                                                        IN LET K:int=quadrant_fp(THIS_x, THIS_y)
                                                           IN LET P:int=quadrant_fp(NEXT_x, NEXT_y)
                                                              IN 0
% Control Flow: Stable
winding_number_contrib_fp_15 : LEMMA
FORALL(e_P_V1_x, e_P_V1_y, e_P_V2_x, e_P_V2_y, e_S_x, e_S_y: nonneg_real, r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y: real, P_V1_x: double, P_V1_y: double, P_V2_x: double, P_V2_y: double, S_x: double, S_y: double):
abs(safe_prjct_double(P_V1_x) - r_P_V1_x)<=e_P_V1_x AND abs(safe_prjct_double(P_V1_y) - r_P_V1_y)<=e_P_V1_y AND abs(safe_prjct_double(P_V2_x) - r_P_V2_x)<=e_P_V2_x AND abs(safe_prjct_double(P_V2_y) - r_P_V2_y)<=e_P_V2_y AND abs(safe_prjct_double(S_x) - r_S_x)<=e_S_x AND abs(safe_prjct_double(S_y) - r_S_y)<=e_S_y
AND ((((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))))) AND (((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))))) OR (((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))))) AND (((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))))) OR ((NOT(((r_P_V1_x - r_S_x) <= 0)) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND (NOT((sub_double(P_V1_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((NOT(((r_P_V2_x - r_S_x) <= 0)) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND (NOT((sub_double(P_V2_x, S_x) <= integerToDouble(0))) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR ((((r_P_V1_x - r_S_x) <= 0) AND (NOT((((r_P_V1_x - r_S_x) <= 0) AND (0 <= (r_P_V1_y - r_S_y)))) AND NOT(((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y)))))) AND ((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V1_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y))))))) OR ((((r_P_V2_x - r_S_x) <= 0) AND (NOT((((r_P_V2_x - r_S_x) <= 0) AND (0 <= (r_P_V2_y - r_S_y)))) AND NOT(((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y)))))) AND ((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (NOT(((sub_double(P_V2_x, S_x) <= integerToDouble(0)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) AND NOT(((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y))))))) OR (((0 <= (r_P_V1_x - r_S_x)) AND (0 <= (r_P_V1_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V1_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V1_y, S_y)))) OR (((0 <= (r_P_V2_x - r_S_x)) AND (0 <= (r_P_V2_y - r_S_y))) AND ((integerToDouble(0) <= sub_double(P_V2_x, S_x)) AND (integerToDouble(0) <= sub_double(P_V2_y, S_y)))) OR (NOT((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y)))) AND NOT((quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y))))) OR ((quadrant((r_P_V1_x - r_S_x), (r_P_V1_y - r_S_y)) = quadrant((r_P_V2_x - r_S_x), (r_P_V2_y - r_S_y))) AND (quadrant_fp(sub_double(P_V1_x, S_x), sub_double(P_V1_y, S_y)) = quadrant_fp(sub_double(P_V2_x, S_x), sub_double(P_V2_y, S_y)))))
IMPLIES
abs(winding_number_contrib_fp(P_V1_x, P_V1_y, P_V2_x, P_V2_y, S_x, S_y) - winding_number_contrib(r_P_V1_x, r_P_V1_y, r_P_V2_x, r_P_V2_y, r_S_x, r_S_y))<=LET THIS_x:real=(r_P_V1_x - r_S_x),
                                                                                                                                                             Err_THIS_x:real=aebounddp_sub(r_P_V1_x, e_P_V1_x, r_S_x, e_S_x)
                                                                                                                                                         IN LET THIS_y:real=(r_P_V1_y - r_S_y),
                                                                                                                                                                Err_THIS_y:real=aebounddp_sub(r_P_V1_y, e_P_V1_y, r_S_y, e_S_y)
                                                                                                                                                            IN LET NEXT_x:real=(r_P_V2_x - r_S_x),
                                                                                                                                                                   Err_NEXT_x:real=aebounddp_sub(r_P_V2_x, e_P_V2_x, r_S_x, e_S_x)
                                                                                                                                                               IN LET NEXT_y:real=(r_P_V2_y - r_S_y),
                                                                                                                                                                      Err_NEXT_y:real=aebounddp_sub(r_P_V2_y, e_P_V2_y, r_S_y, e_S_y)
                                                                                                                                                                  IN LET K:int=4,
                                                                                                                                                                         Err_K:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                     IN LET P:int=4,
                                                                                                                                                                            Err_P:real=max(max(max((0 / 1), (0 / 1)), (0 / 1)), (0 / 1))
                                                                                                                                                                        IN max((0 / 1), (0 / 1))


%|- winding_number_contrib_fp_15: PROOF
%|- (precisa)
%|- QED


END cert_let5