% This file is automatically generated by PRECiSA 

cert_functioncall4: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING functioncall4_fp
IMPORTING functioncall4

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: LET DET:double=Dsub(V1, V2)
                         IN -2, LET DET:double=Dsub(V1, V2)
                                IN 2
% Control Flow: Stable
f_fp_0 : LEMMA
FORALL(e_V1, e_V2: nonneg_real, r_V1, r_V2: real, V1: double, V2: double):
finite?(V1) AND finite?(V2) AND finite?(DET) AND finite?(ItoD(0)) AND
abs(DtoR(V1) - r_V1)<=e_V1 AND abs(DtoR(V2) - r_V2)<=e_V2
AND (((NOT(((r_V1 - r_V2) <= 0)) AND TRUE) AND (NOT((Dsub(V1, V2) <= ItoD(0))) AND TRUE)) OR ((((r_V1 - r_V2) <= 0) AND TRUE) AND ((Dsub(V1, V2) <= ItoD(0)) AND TRUE)))
IMPLIES
abs(f_fp(V1, V2) - f(r_V1, r_V2))<=LET DET:real=(r_V1 - r_V2),
                                       Err_DET:real=aerr_ulp_dp_sub(r_V1, e_V1, r_V2, e_V2)
                                   IN max((0 / 1), (0 / 1))


%|- f_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: Iadd(1, LET DET:double=Dsub(V1, V2)
                                 IN -2), Iadd(1, LET DET:double=Dsub(V1, V2)
                                                 IN 2), Iadd(2, LET DET:double=Dsub(V1, V2)
                                                                IN -2), Iadd(2, LET DET:double=Dsub(V1, V2)
                                                                                IN 2)
% Control Flow: Stable
g_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
finite?(X) AND finite?(Y) AND finite?(X) AND finite?(ItoD(0)) AND
abs(DtoR(X) - r_X)<=e_X AND abs(DtoR(Y) - r_Y)<=e_Y
AND ((((NOT((r_X < 0)) AND NOT(((r_Y - r_X) <= 0))) AND TRUE) AND ((NOT((X < ItoD(0))) AND NOT((Dsub(Y, X) <= ItoD(0)))) AND TRUE)) OR (((NOT((r_X < 0)) AND ((r_Y - r_X) <= 0)) AND TRUE) AND ((NOT((X < ItoD(0))) AND (Dsub(Y, X) <= ItoD(0))) AND TRUE)) OR ((((r_X < 0) AND NOT(((r_X - r_Y) <= 0))) AND TRUE) AND (((X < ItoD(0)) AND NOT((Dsub(X, Y) <= ItoD(0)))) AND TRUE)) OR ((((r_X < 0) AND ((r_X - r_Y) <= 0)) AND TRUE) AND (((X < ItoD(0)) AND (Dsub(X, Y) <= ItoD(0))) AND TRUE)))
IMPLIES
abs(g_fp(X, Y) - g(r_X, r_Y))<=max(max(aerr_int_add(1, (0 / 1), LET DET:real=(r_X - r_Y)
                                                                IN -2, LET DET:real=(r_X - r_Y),
                                                                           Err_DET:real=aerr_ulp_dp_sub(r_X, e_X, r_Y, e_Y)
                                                                       IN max((0 / 1), (0 / 1))), aerr_int_add(1, (0 / 1), LET DET:real=(r_X - r_Y)
                                                                                                                           IN 2, LET DET:real=(r_X - r_Y),
                                                                                                                                     Err_DET:real=aerr_ulp_dp_sub(r_X, e_X, r_Y, e_Y)
                                                                                                                                 IN max((0 / 1), (0 / 1)))), max(aerr_int_add(2, (0 / 1), LET DET:real=(r_Y - r_X)
                                                                                                                                                                                          IN -2, LET DET:real=(r_Y - r_X),
                                                                                                                                                                                                     Err_DET:real=aerr_ulp_dp_sub(r_Y, e_Y, r_X, e_X)
                                                                                                                                                                                                 IN max((0 / 1), (0 / 1))), aerr_int_add(2, (0 / 1), LET DET:real=(r_Y - r_X)
                                                                                                                                                                                                                                                     IN 2, LET DET:real=(r_Y - r_X),
                                                                                                                                                                                                                                                               Err_DET:real=aerr_ulp_dp_sub(r_Y, e_Y, r_X, e_X)
                                                                                                                                                                                                                                                           IN max((0 / 1), (0 / 1)))))


%|- g_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_functioncall4