% This file is automatically generated by PRECiSA 

cert_functioncall9: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING functioncall9_fp
IMPORTING functioncall9

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: Dadd(V1, V2)
% Control Flow: Stable
f_fp_0 : LEMMA
FORALL(e_V1, e_V2: nonneg_real, r_V1, r_V2: real, V1: double, V2: double):
finite?(V1) AND finite?(V2) AND
abs(DtoR(V1) - r_V1)<=e_V1 AND abs(DtoR(V2) - r_V2)<=e_V2
IMPLIES
abs(DtoR(f_fp(V1, V2)) - f(r_V1, r_V2))<=aerr_ulp_dp_add(r_V1, e_V1, r_V2, e_V2)


%|- f_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: LET A:double=f_fp(X, Y)
                         IN Dadd(1, A)
% Control Flow: Stable
g_fp_0 : LEMMA
FORALL(e_X, e_Y: nonneg_real, r_X, r_Y: real, X: double, Y: double):
finite?(X) AND finite?(Y) AND
abs(DtoR(X) - r_X)<=e_X AND abs(DtoR(Y) - r_Y)<=e_Y
IMPLIES
abs(DtoR(g_fp(X, Y)) - g(r_X, r_Y))<=LET A:real=(r_X + r_Y),
                                         Err_A:real=aerr_ulp_dp_add(r_X, e_X, r_Y, e_Y)
                                     IN aerr_ulp_dp_add(1, (0 / 1), r_A, Err_A)


%|- g_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_functioncall9