% This file is automatically generated by PRECiSA 

cert_wcv_detection_taumod: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING wcv_detection_taumod_fp
IMPORTING wcv_detection_taumod

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

tcoa_fp_0 : LEMMA
FORALL(e_sz, e_vz: nonneg_real, r_sz, r_vz: real, sz: double, vz: double):
int_in_range?(-1) AND finite?(sz) AND finite?(vz) AND finite?(Ddiv(sz, vz)) AND finite?(Dneg(Ddiv(sz, vz))) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(vz) - r_vz)<=e_vz
AND (((NOT(((r_sz * r_vz) < 0)) AND TRUE) AND (NOT((Dmul(sz, vz) < ItoD(0))) AND TRUE)) OR ((((r_sz * r_vz) < 0) AND (r_vz /= 0)) AND ((Dmul(sz, vz) < ItoD(0)) AND (vz /= ItoD(0)))))
IMPLIES
abs(DtoR(tcoa_fp(sz, vz)) - tcoa(r_sz, r_vz)) <= max(aerr_ulp_dp_neg(div_safe(r_sz, r_vz), aerr_ulp_dp_div(r_sz, e_sz, r_vz, e_vz)), (0 / 1))


%|- tcoa_fp_0: PROOF
%|- (precisa)
%|- QED


tcpa_fp_0 : LEMMA
FORALL(e_sx, e_vx, e_sy, e_vy: nonneg_real, r_sx, r_vx, r_sy, r_vy: real, sx: double, vx: double, sy: double, vy: double):
int_in_range?(0) AND finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(Dadd(Dmul(sx, vx), Dmul(sy, vy))) AND finite?(Dadd(Dmul(vx, vx), Dmul(vy, vy))) AND finite?(Dmul(sx, vx)) AND finite?(Dmul(sy, vy)) AND finite?(Dmul(vx, vx)) AND finite?(Dmul(vy, vy)) AND finite?(Ddiv(Dneg(Dadd(Dmul(sx, vx), Dmul(sy, vy))), Dadd(Dmul(vx, vx), Dmul(vy, vy)))) AND finite?(Dneg(Dadd(Dmul(sx, vx), Dmul(sy, vy)))) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vy) - r_vy)<=e_vy
AND (((NOT((((r_vx * r_vx) + (r_vy * r_vy)) /= 0)) AND TRUE) AND (NOT((Dadd(Dmul(vx, vx), Dmul(vy, vy)) /= ItoD(0))) AND TRUE)) OR (((((r_vx * r_vx) + (r_vy * r_vy)) /= 0) AND (((r_vx * r_vx) + (r_vy * r_vy)) /= 0)) AND ((Dadd(Dmul(vx, vx), Dmul(vy, vy)) /= ItoD(0)) AND (Dadd(Dmul(vx, vx), Dmul(vy, vy)) /= ItoD(0)))))
IMPLIES
abs(DtoR(tcpa_fp(sx, vx, sy, vy)) - tcpa(r_sx, r_vx, r_sy, r_vy)) <= max(aerr_ulp_dp_div(-(((r_sx * r_vx) + (r_sy * r_vy))), aerr_ulp_dp_neg(((r_sx * r_vx) + (r_sy * r_vy)), aerr_ulp_dp_add((r_sx * r_vx), aerr_ulp_dp_mul(r_sx, e_sx, r_vx, e_vx), (r_sy * r_vy), aerr_ulp_dp_mul(r_sy, e_sy, r_vy, e_vy))), ((r_vx * r_vx) + (r_vy * r_vy)), aerr_ulp_dp_add((r_vx * r_vx), aerr_ulp_dp_mul(r_vx, e_vx, r_vx, e_vx), (r_vy * r_vy), aerr_ulp_dp_mul(r_vy, e_vy, r_vy, e_vy))), (0 / 1))


%|- tcpa_fp_0: PROOF
%|- (precisa)
%|- QED


taumod_fp_0 : LEMMA
FORALL(e_sx, e_vx, e_sy, e_vy, e_DTHR: nonneg_real, r_sx, r_vx, r_sy, r_vy, r_DTHR: real, sx: double, vx: double, sy: double, vy: double, DTHR: double):
int_in_range?(-1) AND finite?(DTHR) AND finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(Dadd(Dmul(sx, sx), Dmul(sy, sy))) AND finite?(Dadd(Dmul(sx, vx), Dmul(sy, vy))) AND finite?(Dsub(Dmul(DTHR, DTHR), Dadd(Dmul(sx, sx), Dmul(sy, sy)))) AND finite?(Dmul(DTHR, DTHR)) AND finite?(Dmul(sx, sx)) AND finite?(Dmul(sx, vx)) AND finite?(Dmul(sy, sy)) AND finite?(Dmul(sy, vy)) AND finite?(Ddiv(Dsub(Dmul(DTHR, DTHR), Dadd(Dmul(sx, sx), Dmul(sy, sy))), Dadd(Dmul(sx, vx), Dmul(sy, vy)))) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vy) - r_vy)<=e_vy AND abs(DtoR(DTHR) - r_DTHR)<=e_DTHR
AND (((NOT((((r_sx * r_vx) + (r_sy * r_vy)) < 0)) AND TRUE) AND (NOT((Dadd(Dmul(sx, vx), Dmul(sy, vy)) < ItoD(0))) AND TRUE)) OR (((((r_sx * r_vx) + (r_sy * r_vy)) < 0) AND (((r_sx * r_vx) + (r_sy * r_vy)) /= 0)) AND ((Dadd(Dmul(sx, vx), Dmul(sy, vy)) < ItoD(0)) AND (Dadd(Dmul(sx, vx), Dmul(sy, vy)) /= ItoD(0)))))
IMPLIES
abs(DtoR(taumod_fp(sx, vx, sy, vy, DTHR)) - taumod(r_sx, r_vx, r_sy, r_vy, r_DTHR)) <= max(aerr_ulp_dp_div(((r_DTHR * r_DTHR) - ((r_sx * r_sx) + (r_sy * r_sy))), aerr_ulp_dp_sub((r_DTHR * r_DTHR), aerr_ulp_dp_mul(r_DTHR, e_DTHR, r_DTHR, e_DTHR), ((r_sx * r_sx) + (r_sy * r_sy)), aerr_ulp_dp_add((r_sx * r_sx), aerr_ulp_dp_mul(r_sx, e_sx, r_sx, e_sx), (r_sy * r_sy), aerr_ulp_dp_mul(r_sy, e_sy, r_sy, e_sy))), ((r_sx * r_vx) + (r_sy * r_vy)), aerr_ulp_dp_add((r_sx * r_vx), aerr_ulp_dp_mul(r_sx, e_sx, r_vx, e_vx), (r_sy * r_vy), aerr_ulp_dp_mul(r_sy, e_sy, r_vy, e_vy))), (0 / 1))


%|- taumod_fp_0: PROOF
%|- (precisa)
%|- QED


sign_fp_0 : LEMMA
FORALL(e_x: nonneg_real, r_x: real, x: double):
int_in_range?(-1) AND int_in_range?(1) AND
abs(DtoR(x) - r_x)<=e_x
AND (((NOT((r_x >= 0)) AND TRUE) AND (NOT((x >= ItoD(0))) AND TRUE)) OR (((r_x >= 0) AND TRUE) AND ((x >= ItoD(0)) AND TRUE)))
IMPLIES
abs(sign_fp(x) - sign(r_x)) <= max((0 / 1), (0 / 1))


%|- sign_fp_0: PROOF
%|- (precisa)
%|- QED


max__fp_0 : LEMMA
FORALL(e_a, e_b: nonneg_real, r_a, r_b: real, a: double, b: double):
finite?(a) AND finite?(b) AND
abs(DtoR(a) - r_a)<=e_a AND abs(DtoR(b) - r_b)<=e_b
AND (((NOT(((r_a - r_b) < 0)) AND TRUE) AND (NOT((Dsub(a, b) < ItoD(0))) AND TRUE)) OR ((((r_a - r_b) < 0) AND TRUE) AND ((Dsub(a, b) < ItoD(0)) AND TRUE)))
IMPLIES
abs(DtoR(max__fp(a, b)) - max_(r_a, r_b)) <= max(e_b, e_a)


%|- max__fp_0: PROOF
%|- (precisa)
%|- QED


min__fp_0 : LEMMA
FORALL(e_a, e_b: nonneg_real, r_a, r_b: real, a: double, b: double):
finite?(a) AND finite?(b) AND
abs(DtoR(a) - r_a)<=e_a AND abs(DtoR(b) - r_b)<=e_b
AND (((NOT(((r_a - r_b) > 0)) AND TRUE) AND (NOT((Dsub(a, b) > ItoD(0))) AND TRUE)) OR ((((r_a - r_b) > 0) AND TRUE) AND ((Dsub(a, b) > ItoD(0)) AND TRUE)))
IMPLIES
abs(DtoR(min__fp(a, b)) - min_(r_a, r_b)) <= max(e_b, e_a)


%|- min__fp_0: PROOF
%|- (precisa)
%|- QED


discr_fp_0 : LEMMA
FORALL(e_a, e_b, e_c: nonneg_real, r_a, r_b, r_c: real, a: double, b: double, c: double):
int_in_range?(4) AND finite?(a) AND finite?(b) AND finite?(c) AND finite?(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))) AND finite?(Dmul(4, a)) AND finite?(Dmul(b, b)) AND finite?(Dmul(Dmul(4, a), c)) AND
abs(DtoR(a) - r_a)<=e_a AND abs(DtoR(b) - r_b)<=e_b AND abs(DtoR(c) - r_c)<=e_c
IMPLIES
abs(DtoR(discr_fp(a, b, c)) - discr(r_a, r_b, r_c)) <= aerr_ulp_dp_sub((r_b * r_b), aerr_ulp_dp_mul(r_b, e_b, r_b, e_b), ((4 * r_a) * r_c), aerr_ulp_dp_mul((4 * r_a), aerr_ulp_dp_mul(4, (0 / 1), r_a, e_a), r_c, e_c))


%|- discr_fp_0: PROOF
%|- (precisa)
%|- QED


root_pos_fp_0 : LEMMA
FORALL(e_a, e_b, e_c: nonneg_real, r_a, r_b, r_c: real, a: double, b: double, c: double):
int_in_range?(0) AND int_in_range?(2) AND int_in_range?(4) AND finite?(a) AND finite?(b) AND finite?(c) AND finite?(Dadd(Dneg(b), Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c)))))) AND finite?(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))) AND finite?(Dmul(2, a)) AND finite?(Dmul(4, a)) AND finite?(Dmul(b, b)) AND finite?(Dmul(Dmul(4, a), c)) AND finite?(Ddiv(Dadd(Dneg(b), Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))))), Dmul(2, a))) AND finite?(Dneg(b)) AND finite?(Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))))) AND finite?(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c)))) AND
abs(DtoR(a) - r_a)<=e_a AND abs(DtoR(b) - r_b)<=e_b AND abs(DtoR(c) - r_c)<=e_c
AND (((((((r_b * r_b) - ((4 * r_a) * r_c)) >= 0) AND (r_a /= 0)) AND (((abs(((r_b * r_b) - ((4 * r_a) * r_c))) - aerr_ulp_dp_abs(((r_b * r_b) - ((4 * r_a) * r_c)), aerr_ulp_dp_sub((r_b * r_b), aerr_ulp_dp_mul(r_b, e_b, r_b, e_b), ((4 * r_a) * r_c), aerr_ulp_dp_mul((4 * r_a), aerr_ulp_dp_mul(4, (0 / 1), r_a, e_a), r_c, e_c)))) >= 0) AND ((2 * r_a) /= 0))) AND (((Dsub(Dmul(b, b), Dmul(Dmul(ItoD(4), a), c)) >= ItoD(0)) AND (a /= ItoD(0))) AND (Dmul(2, a) /= ItoD(0)))) OR ((NOT(((((r_b * r_b) - ((4 * r_a) * r_c)) >= 0) AND (r_a /= 0))) AND TRUE) AND (NOT(((Dsub(Dmul(b, b), Dmul(Dmul(ItoD(4), a), c)) >= ItoD(0)) AND (a /= ItoD(0)))) AND TRUE)))
IMPLIES
abs(DtoR(root_pos_fp(a, b, c)) - root_pos(r_a, r_b, r_c)) <= max(aerr_ulp_dp_div((-(r_b) + sqrt_safe(abs(((r_b * r_b) - ((4 * r_a) * r_c))))), aerr_ulp_dp_add(-(r_b), aerr_ulp_dp_neg(r_b, e_b), sqrt_safe(abs(((r_b * r_b) - ((4 * r_a) * r_c)))), aerr_ulp_dp_sqt(abs(((r_b * r_b) - ((4 * r_a) * r_c))), aerr_ulp_dp_abs(((r_b * r_b) - ((4 * r_a) * r_c)), aerr_ulp_dp_sub((r_b * r_b), aerr_ulp_dp_mul(r_b, e_b, r_b, e_b), ((4 * r_a) * r_c), aerr_ulp_dp_mul((4 * r_a), aerr_ulp_dp_mul(4, (0 / 1), r_a, e_a), r_c, e_c))))), (2 * r_a), aerr_ulp_dp_mul(2, (0 / 1), r_a, e_a)), (0 / 1))


%|- root_pos_fp_0: PROOF
%|- (precisa)
%|- QED


root_neg_fp_0 : LEMMA
FORALL(e_a, e_b, e_c: nonneg_real, r_a, r_b, r_c: real, a: double, b: double, c: double):
int_in_range?(0) AND int_in_range?(2) AND int_in_range?(4) AND finite?(a) AND finite?(b) AND finite?(c) AND finite?(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))) AND finite?(Dsub(Dneg(b), Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c)))))) AND finite?(Dmul(2, a)) AND finite?(Dmul(4, a)) AND finite?(Dmul(b, b)) AND finite?(Dmul(Dmul(4, a), c)) AND finite?(Ddiv(Dsub(Dneg(b), Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))))), Dmul(2, a))) AND finite?(Dneg(b)) AND finite?(Dsqrt(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c))))) AND finite?(Dabs(Dsub(Dmul(b, b), Dmul(Dmul(4, a), c)))) AND
abs(DtoR(a) - r_a)<=e_a AND abs(DtoR(b) - r_b)<=e_b AND abs(DtoR(c) - r_c)<=e_c
AND (((((((r_b * r_b) - ((4 * r_a) * r_c)) >= 0) AND (r_a /= 0)) AND (((abs(((r_b * r_b) - ((4 * r_a) * r_c))) - aerr_ulp_dp_abs(((r_b * r_b) - ((4 * r_a) * r_c)), aerr_ulp_dp_sub((r_b * r_b), aerr_ulp_dp_mul(r_b, e_b, r_b, e_b), ((4 * r_a) * r_c), aerr_ulp_dp_mul((4 * r_a), aerr_ulp_dp_mul(4, (0 / 1), r_a, e_a), r_c, e_c)))) >= 0) AND ((2 * r_a) /= 0))) AND (((Dsub(Dmul(b, b), Dmul(Dmul(ItoD(4), a), c)) >= ItoD(0)) AND (a /= ItoD(0))) AND (Dmul(2, a) /= ItoD(0)))) OR ((NOT(((((r_b * r_b) - ((4 * r_a) * r_c)) >= 0) AND (r_a /= 0))) AND TRUE) AND (NOT(((Dsub(Dmul(b, b), Dmul(Dmul(ItoD(4), a), c)) >= ItoD(0)) AND (a /= ItoD(0)))) AND TRUE)))
IMPLIES
abs(DtoR(root_neg_fp(a, b, c)) - root_neg(r_a, r_b, r_c)) <= max(aerr_ulp_dp_div((-(r_b) - sqrt_safe(abs(((r_b * r_b) - ((4 * r_a) * r_c))))), aerr_ulp_dp_sub(-(r_b), aerr_ulp_dp_neg(r_b, e_b), sqrt_safe(abs(((r_b * r_b) - ((4 * r_a) * r_c)))), aerr_ulp_dp_sqt(abs(((r_b * r_b) - ((4 * r_a) * r_c))), aerr_ulp_dp_abs(((r_b * r_b) - ((4 * r_a) * r_c)), aerr_ulp_dp_sub((r_b * r_b), aerr_ulp_dp_mul(r_b, e_b, r_b, e_b), ((4 * r_a) * r_c), aerr_ulp_dp_mul((4 * r_a), aerr_ulp_dp_mul(4, (0 / 1), r_a, e_a), r_c, e_c))))), (2 * r_a), aerr_ulp_dp_mul(2, (0 / 1), r_a, e_a)), (0 / 1))


%|- root_neg_fp_0: PROOF
%|- (precisa)
%|- QED


inner_product_fp_0 : LEMMA
FORALL(e_sx, e_sy, e_vx, e_vy: nonneg_real, r_sx, r_sy, r_vx, r_vy: real, sx: double, sy: double, vx: double, vy: double):
finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(Dadd(Dmul(sx, vx), Dmul(sy, vy))) AND finite?(Dmul(sx, vx)) AND finite?(Dmul(sy, vy)) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(vy) - r_vy)<=e_vy
IMPLIES
abs(DtoR(inner_product_fp(sx, sy, vx, vy)) - inner_product(r_sx, r_sy, r_vx, r_vy)) <= aerr_ulp_dp_add((r_sx * r_vx), aerr_ulp_dp_mul(r_sx, e_sx, r_vx, e_vx), (r_sy * r_vy), aerr_ulp_dp_mul(r_sy, e_sy, r_vy, e_vy))


%|- inner_product_fp_0: PROOF
%|- (precisa)
%|- QED


cross_product_fp_0 : LEMMA
FORALL(e_sx, e_sy, e_vx, e_vy: nonneg_real, r_sx, r_sy, r_vx, r_vy: real, sx: double, sy: double, vx: double, vy: double):
finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(Dsub(Dmul(sx, vy), Dmul(sy, vx))) AND finite?(Dmul(sx, vy)) AND finite?(Dmul(sy, vx)) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(vy) - r_vy)<=e_vy
IMPLIES
abs(DtoR(cross_product_fp(sx, sy, vx, vy)) - cross_product(r_sx, r_sy, r_vx, r_vy)) <= aerr_ulp_dp_sub((r_sx * r_vy), aerr_ulp_dp_mul(r_sx, e_sx, r_vy, e_vy), (r_sy * r_vx), aerr_ulp_dp_mul(r_sy, e_sy, r_vx, e_vx))


%|- cross_product_fp_0: PROOF
%|- (precisa)
%|- QED


sq_fp_0 : LEMMA
FORALL(e_sx, e_sy: nonneg_real, r_sx, r_sy: real, sx: double, sy: double):
finite?(inner_product_fp(sx, sy, sx, sy)) AND finite?(sx) AND finite?(sy) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy
IMPLIES
abs(DtoR(sq_fp(sx, sy)) - sq(r_sx, r_sy)) <= ErrFun(inner_product)


%|- sq_fp_0: PROOF
%|- (precisa)
%|- QED


proj_fp_0 : LEMMA
FORALL(e_sx, e_vx, e_t: nonneg_real, r_sx, r_vx, r_t: real, sx: double, vx: double, t: double):
finite?(sx) AND finite?(t) AND finite?(vx) AND finite?(Dadd(sx, Dmul(vx, t))) AND finite?(Dmul(vx, t)) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(t) - r_t)<=e_t
IMPLIES
abs(DtoR(proj_fp(sx, vx, t)) - proj(r_sx, r_vx, r_t)) <= aerr_ulp_dp_add(r_sx, e_sx, (r_vx * r_t), aerr_ulp_dp_mul(r_vx, e_vx, r_t, e_t))


%|- proj_fp_0: PROOF
%|- (precisa)
%|- QED


Delta_fp_0 : LEMMA
FORALL(e_sx, e_sy, e_vx, e_vy, e_D: nonneg_real, r_sx, r_sy, r_vx, r_vy, r_D: real, sx: double, sy: double, vx: double, vy: double, D: double):
finite?(cross_product_fp(sx, sy, vx, vy)) AND finite?(sq_fp(vx, vy)) AND finite?(D) AND finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(Dsub(Dmul(Dmul(D, D), sq_fp(vx, vy)), Dmul(cross_product_fp(sx, sy, vx, vy), cross_product_fp(sx, sy, vx, vy)))) AND finite?(Dmul(cross_product_fp(sx, sy, vx, vy), cross_product_fp(sx, sy, vx, vy))) AND finite?(Dmul(D, D)) AND finite?(Dmul(Dmul(D, D), sq_fp(vx, vy))) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(vy) - r_vy)<=e_vy AND abs(DtoR(D) - r_D)<=e_D
IMPLIES
abs(DtoR(Delta_fp(sx, sy, vx, vy, D)) - Delta(r_sx, r_sy, r_vx, r_vy, r_D)) <= aerr_ulp_dp_sub(((r_D * r_D) * sq(r_vx, r_vy)), aerr_ulp_dp_mul((r_D * r_D), aerr_ulp_dp_mul(r_D, e_D, r_D, e_D), sq(r_vx, r_vy), ErrFun(sq)), (cross_product(r_sx, r_sy, r_vx, r_vy) * cross_product(r_sx, r_sy, r_vx, r_vy)), aerr_ulp_dp_mul(cross_product(r_sx, r_sy, r_vx, r_vy), ErrFun(cross_product), cross_product(r_sx, r_sy, r_vx, r_vy), ErrFun(cross_product)))


%|- Delta_fp_0: PROOF
%|- (precisa)
%|- QED


Theta_D_pos_fp_0 : LEMMA
FORALL(e_D, e_sx, e_sy, e_vx, e_vy: nonneg_real, r_D, r_sx, r_sy, r_vx, r_vy: real, D: double, sx: double, sy: double, vx: double, vy: double):
int_in_range?(2) AND finite?(inner_product_fp(sx, sy, vx, vy)) AND finite?(root_pos_fp(a, Dmul(ItoD(2), b), c)) AND finite?(sq_fp(sx, sy)) AND finite?(sq_fp(vx, vy)) AND finite?(D) AND finite?(a) AND finite?(b) AND finite?(c) AND finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(ItoD(2)) AND finite?(Dsub(sq_fp(sx, sy), Dmul(D, D))) AND finite?(Dmul(D, D)) AND finite?(Dmul(ItoD(2), b)) AND finite?(LET a:double=sq_fp(vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                      IN LET b:double=inner_product_fp(sx, sy, vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                         IN LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
                                                                                                                                                                                                                                                                                                                                                                                                                                            IN root_pos_fp(a, Dmul(ItoD(2), b), c)) AND finite?(LET b:double=inner_product_fp(sx, sy, vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                IN LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   IN root_pos_fp(a, Dmul(ItoD(2), b), c)) AND finite?(LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
root_pos_fp(a, Dmul(ItoD(2), b), c)) AND
abs(DtoR(D) - r_D)<=e_D AND abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(vy) - r_vy)<=e_vy
IMPLIES
abs(DtoR(Theta_D_pos_fp(D, sx, sy, vx, vy)) - Theta_D_pos(r_D, r_sx, r_sy, r_vx, r_vy)) <= LET a:real=sq(r_vx, r_vy),
                                                                                               Err_a:real=ErrFun(sq)
                                                                                           IN LET b:real=inner_product(r_sx, r_sy, r_vx, r_vy),
                                                                                                  Err_b:real=ErrFun(inner_product)
                                                                                              IN LET c:real=(sq(r_sx, r_sy) - (r_D * r_D)),
                                                                                                     Err_c:real=aerr_ulp_dp_sub(sq(r_sx, r_sy), ErrFun(sq), (r_D * r_D), aerr_ulp_dp_mul(r_D, e_D, r_D, e_D))
                                                                                                 IN ErrFun(root_pos)


%|- Theta_D_pos_fp_0: PROOF
%|- (precisa)
%|- QED


Theta_D_neg_fp_0 : LEMMA
FORALL(e_D, e_sx, e_sy, e_vx, e_vy: nonneg_real, r_D, r_sx, r_sy, r_vx, r_vy: real, D: double, sx: double, sy: double, vx: double, vy: double):
int_in_range?(2) AND finite?(inner_product_fp(sx, sy, vx, vy)) AND finite?(root_neg_fp(a, Dmul(ItoD(2), b), c)) AND finite?(sq_fp(sx, sy)) AND finite?(sq_fp(vx, vy)) AND finite?(D) AND finite?(a) AND finite?(b) AND finite?(c) AND finite?(sx) AND finite?(sy) AND finite?(vx) AND finite?(vy) AND finite?(ItoD(2)) AND finite?(Dsub(sq_fp(sx, sy), Dmul(D, D))) AND finite?(Dmul(D, D)) AND finite?(Dmul(ItoD(2), b)) AND finite?(LET a:double=sq_fp(vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                      IN LET b:double=inner_product_fp(sx, sy, vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                         IN LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
                                                                                                                                                                                                                                                                                                                                                                                                                                            IN root_neg_fp(a, Dmul(ItoD(2), b), c)) AND finite?(LET b:double=inner_product_fp(sx, sy, vx, vy)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                IN LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   IN root_neg_fp(a, Dmul(ItoD(2), b), c)) AND finite?(LET c:double=Dsub(sq_fp(sx, sy), Dmul(D, D))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       IN root_neg_fp(a, Dmul(ItoD(2), b), c)) AND
abs(DtoR(D) - r_D)<=e_D AND abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(vy) - r_vy)<=e_vy
IMPLIES
abs(DtoR(Theta_D_neg_fp(D, sx, sy, vx, vy)) - Theta_D_neg(r_D, r_sx, r_sy, r_vx, r_vy)) <= LET a:real=sq(r_vx, r_vy),
                                                                                               Err_a:real=ErrFun(sq)
                                                                                           IN LET b:real=inner_product(r_sx, r_sy, r_vx, r_vy),
                                                                                                  Err_b:real=ErrFun(inner_product)
                                                                                              IN LET c:real=(sq(r_sx, r_sy) - (r_D * r_D)),
                                                                                                     Err_c:real=aerr_ulp_dp_sub(sq(r_sx, r_sy), ErrFun(sq), (r_D * r_D), aerr_ulp_dp_mul(r_D, e_D, r_D, e_D))
                                                                                                 IN ErrFun(root_neg)


%|- Theta_D_neg_fp_0: PROOF
%|- (precisa)
%|- QED


Theta_H_pos_fp_0 : LEMMA
FORALL(e_sz, e_nzvz, e_H: nonneg_real, r_sz, r_nzvz, r_H: real, sz: double, nzvz: double, H: double):
int_in_range?(sign_fp(nzvz)) AND finite?(H) AND finite?(nzvz) AND finite?(sz) AND finite?(ItoD(sign_fp(nzvz))) AND finite?(Dsub(Dmul(ItoD(sign_fp(nzvz)), H), sz)) AND finite?(Dmul(ItoD(sign_fp(nzvz)), H)) AND finite?(Ddiv(Dsub(Dmul(ItoD(sign_fp(nzvz)), H), sz), nzvz)) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(nzvz) - r_nzvz)<=e_nzvz AND abs(DtoR(H) - r_H)<=e_H
AND (((TRUE AND (r_nzvz /= 0)) AND (TRUE AND (nzvz /= ItoD(0)))))
IMPLIES
abs(DtoR(Theta_H_pos_fp(sz, nzvz, H)) - Theta_H_pos(r_sz, r_nzvz, r_H)) <= aerr_ulp_dp_div(((sign(r_nzvz) * r_H) - r_sz), aerr_ulp_dp_sub((sign(r_nzvz) * r_H), aerr_ulp_dp_mul(sign(r_nzvz), aerr_int_dp(sign(r_nzvz), ErrFun(sign)), r_H, e_H), r_sz, e_sz), r_nzvz, e_nzvz)


%|- Theta_H_pos_fp_0: PROOF
%|- (precisa)
%|- QED


Theta_H_neg_fp_0 : LEMMA
FORALL(e_sz, e_nzvz, e_H: nonneg_real, r_sz, r_nzvz, r_H: real, sz: double, nzvz: double, H: double):
int_in_range?(sign_fp(nzvz)) AND finite?(H) AND finite?(nzvz) AND finite?(sz) AND finite?(ItoD(Ineg(sign_fp(nzvz)))) AND finite?(Dsub(Dmul(ItoD(Ineg(sign_fp(nzvz))), H), sz)) AND finite?(Dmul(ItoD(Ineg(sign_fp(nzvz))), H)) AND finite?(Ddiv(Dsub(Dmul(ItoD(Ineg(sign_fp(nzvz))), H), sz), nzvz)) AND int_in_range?(Ineg(sign_fp(nzvz))) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(nzvz) - r_nzvz)<=e_nzvz AND abs(DtoR(H) - r_H)<=e_H
AND (((TRUE AND (r_nzvz /= 0)) AND (TRUE AND (nzvz /= ItoD(0)))))
IMPLIES
abs(DtoR(Theta_H_neg_fp(sz, nzvz, H)) - Theta_H_neg(r_sz, r_nzvz, r_H)) <= aerr_ulp_dp_div(((-(sign(r_nzvz)) * r_H) - r_sz), aerr_ulp_dp_sub((-(sign(r_nzvz)) * r_H), aerr_ulp_dp_mul(-(sign(r_nzvz)), aerr_int_dp(-(sign(r_nzvz)), aerr_int_neg(sign(r_nzvz), ErrFun(sign))), r_H, e_H), r_sz, e_sz), r_nzvz, e_nzvz)


%|- Theta_H_neg_fp_0: PROOF
%|- (precisa)
%|- QED


coalt_entry_fp_0 : LEMMA
FORALL(e_sz, e_nzvz, e_TCOA, e_ZTHR: nonneg_real, r_sz, r_nzvz, r_TCOA, r_ZTHR: real, sz: double, nzvz: double, TCOA: double, ZTHR: double):
finite?(Theta_H_neg_fp(sz, nzvz, ZTHR)) AND finite?(TCOA) AND finite?(ZTHR) AND finite?(nzvz) AND finite?(sz) AND finite?(Dmul(Dabs(nzvz), TCOA)) AND finite?(Dabs(nzvz)) AND finite?(LET Z_COA:double=Dmul(Dabs(nzvz), TCOA)
                                                                                                                                                                                      IN Theta_H_neg_fp(sz, nzvz, ZTHR)) AND finite?(Theta_H_neg_fp(sz, nzvz, Z_COA)) AND finite?(TCOA) AND finite?(Z_COA) AND finite?(nzvz) AND finite?(sz) AND finite?(Dmul(Dabs(nzvz), TCOA)) AND finite?(Dabs(nzvz)) AND finite?(LET Z_COA:double=Dmul(Dabs(nzvz), TCOA)
                                                                                                                                                                                                                                                                                                                                                                                                                     IN Theta_H_neg_fp(sz, nzvz, Z_COA)) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(nzvz) - r_nzvz)<=e_nzvz AND abs(DtoR(TCOA) - r_TCOA)<=e_TCOA AND abs(DtoR(ZTHR) - r_ZTHR)<=e_ZTHR
AND (((NOT(((r_ZTHR - (abs(r_nzvz) * r_TCOA)) <= 0)) AND TRUE) AND (NOT((Dsub(ZTHR, Dmul(Dabs(nzvz), TCOA)) <= ItoD(0))) AND TRUE)) OR ((((r_ZTHR - (abs(r_nzvz) * r_TCOA)) <= 0) AND TRUE) AND ((Dsub(ZTHR, Dmul(Dabs(nzvz), TCOA)) <= ItoD(0)) AND TRUE)))
IMPLIES
abs(DtoR(coalt_entry_fp(sz, nzvz, TCOA, ZTHR)) - coalt_entry(r_sz, r_nzvz, r_TCOA, r_ZTHR)) <= LET Z_COA:real=(abs(r_nzvz) * r_TCOA),
                                                                                                   Err_Z_COA:real=aerr_ulp_dp_mul(abs(r_nzvz), aerr_ulp_dp_abs(r_nzvz, e_nzvz), r_TCOA, e_TCOA)
                                                                                               IN max(ErrFun(Theta_H_neg), ErrFun(Theta_H_neg))


%|- coalt_entry_fp_0: PROOF
%|- (precisa)
%|- QED


coalt_exit_fp_0 : LEMMA
FORALL(e_sz, e_nzvz, e_ZTHR: nonneg_real, r_sz, r_nzvz, r_ZTHR: real, sz: double, nzvz: double, ZTHR: double):
finite?(Theta_H_pos_fp(sz, nzvz, ZTHR)) AND finite?(ZTHR) AND finite?(nzvz) AND finite?(sz) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(nzvz) - r_nzvz)<=e_nzvz AND abs(DtoR(ZTHR) - r_ZTHR)<=e_ZTHR
IMPLIES
abs(DtoR(coalt_exit_fp(sz, nzvz, ZTHR)) - coalt_exit(r_sz, r_nzvz, r_ZTHR)) <= ErrFun(Theta_H_pos)


%|- coalt_exit_fp_0: PROOF
%|- (precisa)
%|- QED


vertical_WCV_entry_fp_0 : LEMMA
FORALL(e_B, e_T, e_sz, e_vz, e_TCOA, e_ZTHR: nonneg_real, r_B, r_T, r_sz, r_vz, r_TCOA, r_ZTHR: real, B: double, T: double, sz: double, vz: double, TCOA: double, ZTHR: double):
finite?(B) AND finite?(T) AND finite?(coalt_entry_fp(sz, vz, TCOA, ZTHR)) AND finite?(coalt_exit_fp(sz, vz, ZTHR)) AND finite?(max__fp(B, centry)) AND finite?(B) AND finite?(TCOA) AND finite?(ZTHR) AND finite?(centry) AND finite?(sz) AND finite?(vz) AND finite?(LET centry:double=coalt_entry_fp(sz, vz, TCOA, ZTHR)
                                                                                                                                                                                                                                                                      IN LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)
                                                                                                                                                                                                                                                                         IN max__fp(B, centry)) AND finite?(LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)
                                                                                                                                                                                                                                                                                                            IN max__fp(B, centry)) AND finite?(coalt_entry_fp(sz, vz, TCOA, ZTHR)) AND finite?(coalt_exit_fp(sz, vz, ZTHR)) AND finite?(T) AND finite?(TCOA) AND finite?(ZTHR) AND finite?(sz) AND finite?(vz) AND finite?(LET centry:double=coalt_entry_fp(sz, vz, TCOA, ZTHR)
cexit:double=coalt_exit_fp(sz, vz, ZTHR)
finite?(LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)

abs(DtoR(B) - r_B)<=e_B AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(vz) - r_vz)<=e_vz AND abs(DtoR(TCOA) - r_TCOA)<=e_TCOA AND abs(DtoR(ZTHR) - r_ZTHR)<=e_ZTHR
AND ((((NOT(((abs(r_sz) - r_ZTHR) <= 0)) AND NOT((r_vz /= 0))) AND TRUE) AND ((NOT((Dsub(Dabs(sz), ZTHR) <= ItoD(0))) AND NOT((vz /= ItoD(0)))) AND TRUE)) OR ((((r_vz /= 0) AND (((r_T - coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR)) < 0) OR ((coalt_exit(r_sz, r_vz, r_ZTHR) - r_B) < 0))) AND TRUE) AND (((vz /= ItoD(0)) AND ((Dsub(T, coalt_entry_fp(sz, vz, TCOA, ZTHR)) < ItoD(0)) OR (Dsub(coalt_exit_fp(sz, vz, ZTHR), B) < ItoD(0)))) AND TRUE)) OR ((((r_vz /= 0) AND NOT((((r_T - coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR)) < 0) OR ((coalt_exit(r_sz, r_vz, r_ZTHR) - r_B) < 0)))) AND TRUE) AND (((vz /= ItoD(0)) AND NOT(((Dsub(T, coalt_entry_fp(sz, vz, TCOA, ZTHR)) < ItoD(0)) OR (Dsub(coalt_exit_fp(sz, vz, ZTHR), B) < ItoD(0))))) AND TRUE)) OR (((((abs(r_sz) - r_ZTHR) <= 0) AND NOT((r_vz /= 0))) AND TRUE) AND (((Dsub(Dabs(sz), ZTHR) <= ItoD(0)) AND NOT((vz /= ItoD(0)))) AND TRUE)))
IMPLIES
abs(DtoR(vertical_WCV_entry_fp(B, T, sz, vz, TCOA, ZTHR)) - vertical_WCV_entry(r_B, r_T, r_sz, r_vz, r_TCOA, r_ZTHR)) <= max(max(LET centry:real=coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR),
                                                                                                                                     Err_centry:real=ErrFun(coalt_entry)
                                                                                                                                 IN LET cexit:real=coalt_exit(r_sz, r_vz, r_ZTHR),
                                                                                                                                        Err_cexit:real=ErrFun(coalt_exit)
                                                                                                                                    IN max(e_T, ErrFun(max_)), e_B), e_T)


%|- vertical_WCV_entry_fp_0: PROOF
%|- (precisa)
%|- QED


vertical_WCV_exit_minus_entry_fp_0 : LEMMA
FORALL(e_B, e_T, e_sz, e_vz, e_TCOA, e_ZTHR: nonneg_real, r_B, r_T, r_sz, r_vz, r_TCOA, r_ZTHR: real, B: double, T: double, sz: double, vz: double, TCOA: double, ZTHR: double):
finite?(B) AND finite?(T) AND finite?(Dsub(B, T)) AND finite?(B) AND finite?(T) AND finite?(Dsub(T, B)) AND finite?(coalt_entry_fp(sz, vz, TCOA, ZTHR)) AND finite?(coalt_exit_fp(sz, vz, ZTHR)) AND finite?(max__fp(B, centry)) AND finite?(min__fp(T, cexit)) AND finite?(B) AND finite?(T) AND finite?(TCOA) AND finite?(ZTHR) AND finite?(centry) AND finite?(cexit) AND finite?(sz) AND finite?(vz) AND finite?(Dsub(min__fp(T, cexit), max__fp(B, centry))) AND finite?(LET centry:double=coalt_entry_fp(sz, vz, TCOA, ZTHR)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              IN LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 IN Dsub(min__fp(T, cexit), max__fp(B, centry))) AND finite?(LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)
sub(min__fp(T, cexit), max__fp(B, centry))) AND finite?(coalt_entry_fp(sz, vz, TCOA, ZTHR)) AND finite?(coalt_exit_fp(sz, vz, ZTHR)) AND finite?(B) AND finite?(T) AND finite?(TCOA) AND finite?(ZTHR) AND finite?(sz) AND finite?(vz) AND finite?(Dsub(B, T)) AND finite?(LET centry:double=coalt_entry_fp(sz, vz, TCOA, ZTHR)
cexit:double=coalt_exit_fp(sz, vz, ZTHR)
sub(B, T)) AND finite?(LET cexit:double=coalt_exit_fp(sz, vz, ZTHR)
sub(B, T)) AND
abs(DtoR(B) - r_B)<=e_B AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(vz) - r_vz)<=e_vz AND abs(DtoR(TCOA) - r_TCOA)<=e_TCOA AND abs(DtoR(ZTHR) - r_ZTHR)<=e_ZTHR
AND ((((NOT(((abs(r_sz) - r_ZTHR) <= 0)) AND NOT((r_vz /= 0))) AND TRUE) AND ((NOT((Dsub(Dabs(sz), ZTHR) <= ItoD(0))) AND NOT((vz /= ItoD(0)))) AND TRUE)) OR ((((r_vz /= 0) AND (((r_T - coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR)) < 0) OR ((coalt_exit(r_sz, r_vz, r_ZTHR) - r_B) < 0))) AND TRUE) AND (((vz /= ItoD(0)) AND ((Dsub(T, coalt_entry_fp(sz, vz, TCOA, ZTHR)) < ItoD(0)) OR (Dsub(coalt_exit_fp(sz, vz, ZTHR), B) < ItoD(0)))) AND TRUE)) OR ((((r_vz /= 0) AND NOT((((r_T - coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR)) < 0) OR ((coalt_exit(r_sz, r_vz, r_ZTHR) - r_B) < 0)))) AND TRUE) AND (((vz /= ItoD(0)) AND NOT(((Dsub(T, coalt_entry_fp(sz, vz, TCOA, ZTHR)) < ItoD(0)) OR (Dsub(coalt_exit_fp(sz, vz, ZTHR), B) < ItoD(0))))) AND TRUE)) OR (((((abs(r_sz) - r_ZTHR) <= 0) AND NOT((r_vz /= 0))) AND TRUE) AND (((Dsub(Dabs(sz), ZTHR) <= ItoD(0)) AND NOT((vz /= ItoD(0)))) AND TRUE)))
IMPLIES
abs(DtoR(vertical_WCV_exit_minus_entry_fp(B, T, sz, vz, TCOA, ZTHR)) - vertical_WCV_exit_minus_entry(r_B, r_T, r_sz, r_vz, r_TCOA, r_ZTHR)) <= max(max(LET centry:real=coalt_entry(r_sz, r_vz, r_TCOA, r_ZTHR),
                                                                                                                                                           Err_centry:real=ErrFun(coalt_entry)
                                                                                                                                                       IN LET cexit:real=coalt_exit(r_sz, r_vz, r_ZTHR),
                                                                                                                                                              Err_cexit:real=ErrFun(coalt_exit)
                                                                                                                                                          IN max(aerr_ulp_dp_sub(r_B, e_B, r_T, e_T), aerr_ulp_dp_sub(min_(r_T, r_cexit), ErrFun(min_), max_(r_B, r_centry), ErrFun(max_))), aerr_ulp_dp_sub(r_T, e_T, r_B, e_B)), aerr_ulp_dp_sub(r_B, e_B, r_T, e_T))


%|- vertical_WCV_exit_minus_entry_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_wcv_detection_taumod