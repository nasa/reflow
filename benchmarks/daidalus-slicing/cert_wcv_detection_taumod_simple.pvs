% This file is automatically generated by PRECiSA 

cert_wcv_detection_taumod_simple: THEORY
BEGIN
IMPORTING PRECiSA@strategies
IMPORTING axm_bnd@aerr_ulp__double
IMPORTING axm_bnd@aerr_ulp__single
IMPORTING wcv_detection_taumod_simple_fp
IMPORTING wcv_detection_taumod_simple

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

% Floating-Point Result: -1, Dneg(Ddiv(sz, vz))
% Control Flow: Stable
tcoa_fp_0 : LEMMA
FORALL(e_sz, e_vz: nonneg_real, r_sz, r_vz: real, sz: double, vz: double):
finite?(sz) AND finite?(vz) AND finite?(Dmul(sz, vz)) AND finite?(ItoD(0)) AND
abs(DtoR(sz) - r_sz)<=e_sz AND abs(DtoR(vz) - r_vz)<=e_vz
AND ((((r_vz /= 0) AND ((r_sz * r_vz) < 0)) AND ((vz /= ItoD(0)) AND (Dmul(sz, vz) < ItoD(0)))) OR (NOT(((r_sz * r_vz) < 0)) AND NOT((Dmul(sz, vz) < ItoD(0)))))
IMPLIES
abs(DtoR(tcoa_fp(sz, vz)) - tcoa(r_sz, r_vz))<=max(aerr_ulp_dp_neg(div_safe(r_sz, r_vz), aerr_ulp_dp_div(r_sz, e_sz, r_vz, e_vz)), (0 / 1))


%|- tcoa_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: 0, Ddiv(Dneg(Dadd(Dmul(sx, vx), Dmul(sy, vy))), Dadd(Dmul(vx, vx), Dmul(vy, vy)))
% Control Flow: Stable
tcpa_fp_0 : LEMMA
FORALL(e_sx, e_vx, e_sy, e_vy: nonneg_real, r_sx, r_vx, r_sy, r_vy: real, sx: double, vx: double, sy: double, vy: double):
finite?(sx) AND finite?(vx) AND finite?(sy) AND finite?(vy) AND finite?(Dadd(Dmul(vx, vx), Dmul(vy, vy))) AND finite?(ItoD(0)) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vy) - r_vy)<=e_vy
AND ((((((r_vx * r_vx) + (r_vy * r_vy)) /= 0) AND (((r_vx * r_vx) + (r_vy * r_vy)) > 0)) AND ((Dadd(Dmul(vx, vx), Dmul(vy, vy)) /= ItoD(0)) AND (Dadd(Dmul(vx, vx), Dmul(vy, vy)) > ItoD(0)))) OR (NOT((((r_vx * r_vx) + (r_vy * r_vy)) > 0)) AND NOT((Dadd(Dmul(vx, vx), Dmul(vy, vy)) > ItoD(0)))))
IMPLIES
abs(DtoR(tcpa_fp(sx, vx, sy, vy)) - tcpa(r_sx, r_vx, r_sy, r_vy))<=max(aerr_ulp_dp_div(-(((r_sx * r_vx) + (r_sy * r_vy))), aerr_ulp_dp_neg(((r_sx * r_vx) + (r_sy * r_vy)), aerr_ulp_dp_add((r_sx * r_vx), aerr_ulp_dp_mul(r_sx, e_sx, r_vx, e_vx), (r_sy * r_vy), aerr_ulp_dp_mul(r_sy, e_sy, r_vy, e_vy))), ((r_vx * r_vx) + (r_vy * r_vy)), aerr_ulp_dp_add((r_vx * r_vx), aerr_ulp_dp_mul(r_vx, e_vx, r_vx, e_vx), (r_vy * r_vy), aerr_ulp_dp_mul(r_vy, e_vy, r_vy, e_vy))), (0 / 1))


%|- tcpa_fp_0: PROOF
%|- (precisa)
%|- QED


% Floating-Point Result: -1, Ddiv(Dsub(Dmul(DTHR, DTHR), Dadd(Dmul(sx, sx), Dmul(sy, sy))), Dadd(Dmul(sx, vx), Dmul(sy, vy)))
% Control Flow: Stable
taumod_fp_0 : LEMMA
FORALL(e_sx, e_vx, e_sy, e_vy, e_DTHR: nonneg_real, r_sx, r_vx, r_sy, r_vy, r_DTHR: real, sx: double, vx: double, sy: double, vy: double, DTHR: double):
finite?(sx) AND finite?(vx) AND finite?(sy) AND finite?(vy) AND finite?(DTHR) AND finite?(Dadd(Dmul(sx, vx), Dmul(sy, vy))) AND finite?(ItoD(0)) AND
abs(DtoR(sx) - r_sx)<=e_sx AND abs(DtoR(vx) - r_vx)<=e_vx AND abs(DtoR(sy) - r_sy)<=e_sy AND abs(DtoR(vy) - r_vy)<=e_vy AND abs(DtoR(DTHR) - r_DTHR)<=e_DTHR
AND ((((((r_sx * r_vx) + (r_sy * r_vy)) /= 0) AND (((r_sx * r_vx) + (r_sy * r_vy)) < 0)) AND ((Dadd(Dmul(sx, vx), Dmul(sy, vy)) /= ItoD(0)) AND (Dadd(Dmul(sx, vx), Dmul(sy, vy)) < ItoD(0)))) OR (NOT((((r_sx * r_vx) + (r_sy * r_vy)) < 0)) AND NOT((Dadd(Dmul(sx, vx), Dmul(sy, vy)) < ItoD(0)))))
IMPLIES
abs(DtoR(taumod_fp(sx, vx, sy, vy, DTHR)) - taumod(r_sx, r_vx, r_sy, r_vy, r_DTHR))<=max(aerr_ulp_dp_div(((r_DTHR * r_DTHR) - ((r_sx * r_sx) + (r_sy * r_sy))), aerr_ulp_dp_sub((r_DTHR * r_DTHR), aerr_ulp_dp_mul(r_DTHR, e_DTHR, r_DTHR, e_DTHR), ((r_sx * r_sx) + (r_sy * r_sy)), aerr_ulp_dp_add((r_sx * r_sx), aerr_ulp_dp_mul(r_sx, e_sx, r_sx, e_sx), (r_sy * r_sy), aerr_ulp_dp_mul(r_sy, e_sy, r_sy, e_sy))), ((r_sx * r_vx) + (r_sy * r_vy)), aerr_ulp_dp_add((r_sx * r_vx), aerr_ulp_dp_mul(r_sx, e_sx, r_vx, e_vx), (r_sy * r_vy), aerr_ulp_dp_mul(r_sy, e_sy, r_vy, e_vy))), (0 / 1))


%|- taumod_fp_0: PROOF
%|- (precisa)
%|- QED


END cert_wcv_detection_taumod_simple