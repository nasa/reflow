wcv_detection_taumod_nvz_nzv_wo_type_restrictions: THEORY
BEGIN
    %IMPORTING wcv
    %%%%%%%%%%%%%%%%%% begin wcv file %%%%%%%%%%%%%%%%%%%%%%%
    %  tcoa(sz,vz:real): real = IF (sz*vz < 0) THEN -(sz/vz)
    %                    ELSE -1
	% 	       ENDIF
    % assuming vx*vx + vy*vy \= 0
    tcpa(sx,vx,sy,vy:real) : real =
    LET a_ = vx*vx + vy*vy IN
        -(sx*vx + sy*vy) / a_ % -> division is causing problems with Kodiak [M3]
    % assuming vx*vx + vy*vy \= 0
    taumod(sx,vx,sy,vy,DTHR:real) : real =
    LET a_ = (sx*vx)+(sy*vy) IN
        (DTHR*DTHR - (sx*sx + sy*sy)) / a_ % -> division is causing problems with Kodiak [M3]
    horizontal_wcv(sx,sy,vx,vy, DTHR,TTHR:real): bool =
    LET tc = tcpa(sx,vx,sy,vy),
        tm = taumod(sx,vx,sy,vy,DTHR)
        IN
    (sx*sx) + (sy*sy) - DTHR*DTHR <= 0
    OR
    (((sx+tc*vx)*(sx+tc*vx) + (sy+tc*vy)*(sy+tc*vy)) - DTHR * DTHR <= 0  AND
    sx*vx + sy*vy < 0  AND tm - TTHR <= 0)
    % vertical_WCV(sz,vz,ZTHR,TCOA:real): bool =
    % abs(sz) - ZTHR <= 0 OR
    % (0 <= tcoa(sz,vz) AND tcoa(sz,vz) - TCOA <= 0)
    % WCV(sx,sy,sz,vx,vy,vz,DTHR,TTHR,ZTHR,TCOA:real): bool =
    % horizontal_wcv(sx,sy,vx,vy,DTHR,TTHR)
    % AND
    % vertical_WCV(sz,vz,ZTHR,TCOA)
     %%%%%%%%%%%%%%%%%% end wcv file %%%%%%%%%%%%%%%%%%%%%%%%
    % % get sign of real (copied form nasalib reals@sign)
    % sign(x:real): int = IF x >= 0 THEN 1 ELSE -1 ENDIF
    % get max between 2 values
    max_(a, b: real): real = IF a - b < 0 THEN b ELSE a ENDIF
    % get max between 2 values
    min_(a, b: real): real = IF a - b > 0 THEN b ELSE a ENDIF
    % IMPORTING reals@sqrt
    % uncomment this to type check this file
    % definition of sqrt (copied from nasalib reals@sqrt)
    % sqrt(nnx: real| nnx >= 0): {nnz : nnreal | nnz*nnz = nnx}
    % disctiminant (copied from nasalib reals@quadratic)
    discr(a, b, c: real) : real = b*b - 4*a*c
    % root of quadratic equation using + sign
    % assuming  b*b - 4*a*c >= 0 AND a /= 0 T
    root_pos(a, b, c: real): real =
        (-b + sqrt(abs(b*b - 4*a*c))) / (2*a)
    % root of quadratic equation using - sign
    % assuming  b*b - 4*a*c >= 0 AND a /= 0 T
    root_neg(a, b, c: real): real =
        (-b - sqrt(abs(b*b - 4*a*c))) / (2*a)
    % inner product between vectors (sx, sy) and (vx, vy)
    inner_product(sx, sy, vx, vy: real): real =
        sx*vx + sy*vy
    % cross product between vectors (sx, sy) and (vx, vy)
    cross_product(sx, sy, vx, vy: real): real =
        sx*vy - sy*vx
    % squared norm of vector (sx, sy)
    sq(sx, sy: real): real =
        inner_product(sx, sy, sx, sy)
    % ULM 1D projection
    proj(sx, vx, t: real): real =
        sx + vx * t
    Delta(sx, sy, vx, vy, D: real): real
    = LET cross_product = cross_product(sx, sy, vx, vy)
      IN D*D*sq(vx, vy) - cross_product*cross_product
    % Theta D using root with + sign
    Theta_D_pos(D, sx, sy, vx, vy: real): real =
        LET a = sq(vx, vy),
            b = inner_product(sx, sy, vx, vy),
            c = sq(sx, sy) - D*D IN
        root_pos(a,2*b,c)
    % Theta D using root with - sign
    Theta_D_neg(D, sx, sy, vx, vy: real): real =
        LET a = sq(vx, vy),
            b = inner_product(sx, sy, vx, vy),
            c = sq(sx, sy) - D*D IN
        root_neg(a,2*b,c)
    % Theta H using + sign
    Theta_H_pos_negative_vz(sz, nvz, H: real): real =
        (-H-sz)/nvz
    % Assuming:
    % 1) nzvx /= 0 OR  nzvy /= 0
    % 2) [unecessary] (2*inner_product(sx, sy, nzvx, nzvy))^2 >= 4*sq(nzvx, nzvy)*(sq(sx, sy) - DTHR*DTHR)
    %   a) in first if  c(sq(sx, sy) - DTHR*DTHR) < 0 and a > 0 , thus b^2 - 4*a*c > 0
    %   b) in second if a >= 0 and  delta = D*D*(v.v) - (sxv).(sxv) > 0
    %      thus  b^2 - 4*a*c > 0, once (sxv).(sxv) = ((sxv)xs).v = ((s.s)v -(s.v)s).v = (s.s)(v.v) - (s.v)^2
    %      thus delta = D^2(v.v) - [ (s.s)(v.v) - (s.v)^2] = D^2(v.v) + (s.v)^2 - (s.s)(v.v) > 0
    %      disc = 4(s.v)^2 - 4(v.v)[(s.s)-D^2] =(/4)  (s.v)^2 - (v.v)(s.s) + (v.v)D^2
    horizontal_WCV_taumod_interval_non_zero_velocity(T, sx, sy, nzvx, nzvy, TAUMOD, DTHR: real): bool
    = LET a = sq(nzvx, nzvy), % a /= 0
          b = 2 * inner_product(sx, sy, nzvx, nzvy) + TAUMOD * sq(nzvx, nzvy),
          c = sq(sx, sy) + TAUMOD * inner_product(sx, sy, nzvx, nzvy) - DTHR*DTHR
      IN
          IF sq(sx, sy) - DTHR*DTHR <= 0
          THEN % 0 <= min_(T, theta_d_pos) % IFF 0 <=T AND 0<=theta_d_pos
               LET % theta_d_pos = Theta_D_pos(DTHR, sx, sy, nzvx, nzvy)
                 %             = root_pos(sq(nzvx, nzvy),2*inner_product(sx, sy, nzvx, nzvy),sq(sx, sy) - DTHR*DTHR)
                 %             =[ by (3) and sq(nzvx, nzvy) > 0, there's no need for the IF-THEN-ELSE from root_pos ]
                 root_pos_b  = 2*inner_product(sx, sy, nzvx, nzvy),
                 root_pos_c  = sq(sx, sy) - DTHR*DTHR IN
               LET theta_d_pos = (-root_pos_b + sqrt(abs(root_pos_b*root_pos_b - 4*a*root_pos_c))) / (2*a) % TODO abs because of Kodiak
               IN 0 <=T AND 0<=theta_d_pos
         ELSIF inner_product(sx, sy, nzvx, nzvy) >= 0 OR discr(a, b, c) < 0 THEN  FALSE
         ELSE LET root_neg_var = % root_neg(a, b, c) % at this point discr >= 0 and a > 0
                    (-b - sqrt(abs(b*b - 4*a*c))) / (2*a) % TODO We had to include abs because of a Kodiak error
              IN
            IF Delta(sx, sy, nzvx, nzvy, DTHR) >= 0 AND root_neg_var - T  <= 0
            THEN % max_(0, root_neg_var) - min_(T, theta_d_pos) <= 0
                LET % theta_d_pos = Theta_D_pos(DTHR, sx, sy, nzvx, nzvy)
                    %             = root_pos(sq(nzvx, nzvy),2*inner_product(sx, sy, nzvx, nzvy),sq(sx, sy) - DTHR*DTHR)
                    %             =[ by (3) and sq(nzvx, nzvy) > 0, there's no need for the IF-THEN-ELSE from root_pos ]
                    root_pos_b  = 2*inner_product(sx, sy, nzvx, nzvy),
                    root_pos_c  = sq(sx, sy) - DTHR*DTHR IN
                LET theta_d_pos = (-root_pos_b + sqrt(abs(root_pos_b*root_pos_b - 4*a*root_pos_c))) / (2*a) % TODO abs because of Kodiak
                IN % max_(0, root_neg_var) - min_(T, theta_d_pos) <= 0
                     (-root_neg_var <= 0 AND (root_neg_var - T <= 0 AND root_neg_var - theta_d_pos <= 0)) OR
                     (root_neg_var < 0 AND (-T <= 0 AND -theta_d_pos <= 0))
            ELSE FALSE
            ENDIF
         ENDIF
    coalt_entry_negative_vz(sz, nvz, TCOA, ZTHR: real): real =
    LET Z_COA = abs(nvz)*TCOA
      IN IF ZTHR - Z_COA <= 0
         THEN (Z_COA-sz)/nvz
         ELSE (ZTHR-sz)/nvz
         ENDIF
    coalt_exit_negative_vz(sz, nvz, ZTHR: real): real =
        Theta_H_pos_negative_vz(sz, nvz, ZTHR)
    % Assuming:
    % 1) nvz < 0
    % 2) nzvx /= 0 or nzvy /= 0
    % 4) [unecessary (read-above explanation)] (2*inner_product(proj_x111, proj_y111, nzvx, nzvy))^2 >= 4*sq(nzvx, nzvy)*(sq(proj_x111, proj_y111) - DTHR*DTHR)
    % 5) B < T
    WCV_interval_negative_vz_non_zero_velocity(B, T, sx, sy, sz, nzvx, nzvy, nvz, TAUMOD, DTHR, ZTHR, TCOA, TTHR: real): bool
    =   LET centry1 = coalt_entry_negative_vz(sz, nvz, TCOA, ZTHR),
            cexit1 = coalt_exit_negative_vz(sz, nvz, ZTHR)
        IN  IF T - centry1 < 0 OR cexit1 - B < 0
            THEN FALSE
            ELSE LET vexit12 = min_(T, cexit1),
                     ventry12 = max_(B, centry1) IN
                    LET vexit_minus_ventry12 = vexit12 - ventry12,
                        proj_x112 = sx + nzvx * ventry12,
                        proj_y112 = sy + nzvy * ventry12
                 IN IF vexit_minus_ventry12 > 0
                        THEN horizontal_WCV_taumod_interval_non_zero_velocity(vexit_minus_ventry12, proj_x112, proj_y112, nzvx, nzvy, TAUMOD, DTHR)
                    ELSE horizontal_wcv(proj_x112, proj_y112, nzvx, nzvy, DTHR, TAUMOD)
                    ENDIF
            ENDIF
    % WCV_detection(sx, sy, sz, vx, vy, vz, B, T: real): bool =
    %     LET TAUMOD = 1.0, TCOA = 1.0, DTHR = 1.0, TTHR = 1.0, ZTHR = 1.0
    %     IN
    %         LET proj_x = sx + vx * B,
    %             proj_y = sy + vy * B,
    %             proj_z = sz + vz * B
    %         IN  IF B - T > 0 THEN WCV_interval(B, T, sx, sy, sz, vx, vy, vz)
    %             ELSIF (T - B) < 0 THEN FALSE
    %             ELSE
    %                 WCV(proj_x, proj_y, proj_z, vx ,vy ,vz , DTHR, TAUMOD, ZTHR, TCOA)
    %             ENDIF
 END wcv_detection_taumod_nvz_nzv_wo_type_restrictions
