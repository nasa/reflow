(**************************************************************************)
(*                                                                        *)
(*  This file is part of WP plug-in of Frama-C.                           *)
(*                                                                        *)
(*  Copyright (C) 2007-2020                                               *)
(*    CEA (Commissariat a l'energie atomique et aux energies              *)
(*         alternatives)                                                  *)
(*                                                                        *)
(*  you can redistribute it and/or modify it under the terms of the GNU   *)
(*  Lesser General Public License as published by the Free Software       *)
(*  Foundation, version 2.1.                                              *)
(*                                                                        *)
(*  It is distributed in the hope that it will be useful,                 *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of        *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *)
(*  GNU Lesser General Public License for more details.                   *)
(*                                                                        *)
(*  See the GNU Lesser General Public License version 2.1                 *)
(*  for more details (enclosed in the file licenses/LGPLv2.1).            *)
(*                                                                        *)
(**************************************************************************)

(* -------------------------------------------------------------------------- *)
(* --- C-Integer Arithmetics for Alt-Ergo                                 --- *)
(* -------------------------------------------------------------------------- *)

theory Cfloat

  use real.Abs
  use ieee_float.RoundingMode as Rounding
  use ieee_float.Float32 as F32
  use ieee_float.Float64 as F64
  use ieee_float.FloatConverter as Cnv
  use real.RealInfix
  use real.Real (* added for - in ulp definitions *)

  (* -------------------------------------------------------------------------- *)
  (* --- C-Integer Arithmetics for Alt-Ergo                                 --- *)
  (* -------------------------------------------------------------------------- *)

  type f32 = F32.t (* single precision IEEE *)
  type f64 = F64.t (* double precision IEEE *)

  (* C-Float Conversion *)

  function of_f32 (f: f32) : real = F32.t'real f
  function of_f64 (d: f64) : real = F64.t'real d

  (* C-Float Classification *)

  predicate is_finite_f32 (f:f32) = F32.t'isFinite f
  predicate is_NaN_f32 (f:f32) = F32.is_nan f
  predicate is_infinite_f32 (f: f32) = F32.is_infinite f
  predicate is_positive_infinite_f32 (f: f32) = F32.is_plus_infinity f
  predicate is_negative_infinite_f32 (f: f32) = F32.is_minus_infinity f

  predicate is_finite_f64 (d:f64) = F64.t'isFinite d
  predicate is_NaN_f64 (d:f64) = F64.is_nan d
  predicate is_infinite_f64 (d: f64) = F64.is_infinite d
  predicate is_positive_infinite_f64 (d: f64) = F64.is_plus_infinity d
  predicate is_negative_infinite_f64 (d: f64) = F64.is_minus_infinity d

  (* To_float *)

  function to_f32 real : f32
  function to_f64 real : f64

  axiom to_float_is_finite_32: forall f:f32. is_finite_f32(f) -> F32.eq (to_f32( of_f32 f )) f
  axiom to_f32_range_round: forall x. F32.in_range x -> of_f32 (to_f32 x) = F32.round Rounding.RNE x
  axiom to_f32_range_finite: forall x. F32.in_range x -> is_finite_f32 (to_f32 x)
  axiom to_f32_minus_infinity: forall x. x <. -. F32.max_real -> is_negative_infinite_f32 (to_f32 x)
  axiom to_f32_plus_infinity: forall x. x >. F32.max_real -> is_positive_infinite_f32 (to_f32 x)

  axiom to_float_is_finite_64: forall f:f64. is_finite_f64(f) -> F64.eq (to_f64( of_f64 f )) f
  axiom to_f64_range_round: forall x. F64.in_range x -> of_f64 (to_f64 x) = F64.round Rounding.RNE x
  axiom to_f64_range_finite: forall x. F64.in_range x -> is_finite_f64 (to_f64 x)
  axiom to_f64_minus_infinity: forall x. x <. -. F64.max_real -> is_negative_infinite_f64 (to_f64 x)
  axiom to_f64_plus_infinity: forall x. x >. F64.max_real -> is_positive_infinite_f64 (to_f64 x)

  (* Note: This is OK as we have in Why3 ieee_float:

     axiom Round_idempotent :
       forall m1 m2:mode, x:real. round m1 (round m2 x) = round m2 x

     So we can round RNE (to_f32/64 behavior) after any rounding.
  *)
  function round_float (m: Rounding.mode) (r: real) : f32 =
    to_f32 (F32.round m r)

  function round_double (m: Rounding.mode) (r: real) : f64 =
    to_f64 (F64.round m r)

  (* Take care of +0/-0 *)
  axiom is_zero_to_f32_zero: F32.is_zero (to_f32 0.0)
  axiom is_zero_to_f64_zero: F64.is_zero (to_f64 0.0)

  lemma real_0_is_zero_f32: forall f:f32. 0.0 = of_f32 f -> F32.is_zero f
  lemma real_0_is_zero_f64: forall f:f64. 0.0 = of_f64 f -> F64.is_zero f

  (* Conversions *)
  axiom f32_to_f64:
    forall f:f32 [to_f64 (of_f32 f)]. to_f64 (of_f32 f) = Cnv.to_float64 Rounding.RNE f
  axiom f64_to_f32:
    forall f:f64 [to_f32 (of_f64 f)]. to_f32 (of_f64 f) = Cnv.to_float32 Rounding.RNE f

  (* Finite Constants *)

  predicate finite (x:real) = (is_finite_f32 (to_f32 x)) /\ (is_finite_f64 (to_f64 x))

  (* Equal *)

  predicate eq_f32 (x:f32) (y:f32) = F32.eq x y
  predicate eq_f64 (x:f64) (y:f64) = F64.eq x y
  function eq_f32b (x:f32) (y:f32) : bool = eq_f32 x y
  function eq_f64b (x:f64) (y:f64) : bool = eq_f64 x y

  (* Not Equal *)

  predicate ne_f32 (x:f32) (y:f32) = not (eq_f32 x y)
  predicate ne_f64 (x:f64) (y:f64) = not (eq_f64 x y)
  function ne_f32b (x:f32) (y:f32) : bool = ne_f32 x y
  function ne_f64b (x:f64) (y:f64) : bool = ne_f64 x y

  (* Comparison (<=) *)

  predicate le_f32 (x:f32) (y:f32) = F32.le x y
  predicate le_f64 (x:f64) (y:f64) = F64.le x y
  function le_f32b (x:f32) (y:f32) : bool = le_f32 x y
  function le_f64b (x:f64) (y:f64) : bool = le_f64 x y


  (* Comparison (<) *)

  predicate lt_f32 (x:f32) (y:f32) = F32.lt x y
  predicate lt_f64 (x:f64) (y:f64) = F64.lt x y
  function lt_f32b (x:f32) (y:f32) : bool = lt_f32 x y
  function lt_f64b (x:f64) (y:f64) : bool = lt_f64 x y

  (* Negation *)

  function neg_f32 (x:f32) : f32 = F32.neg x
  function neg_f64 (x:f64) : f64 = F64.neg x

  (* Addition *)

  function add_f32 (x:f32) (y:f32) : f32 = F32.(.+) x y
  function add_f64 (x:f64) (y:f64) : f64 = F64.(.+) x y

  (* Substraction *)

  function sub_f32 (x:f32) (y:f32) : f32 = F32.(.-) x y
  function sub_f64 (x:f64) (y:f64) : f64 = F64.(.-) x y

  (* Multiplication *)

  function mul_f32 (x:f32) (y:f32) : f32 = F32.(.*) x y
  function mul_f64 (x:f64) (y:f64) : f64 = F64.(.*) x y

  (* Division *)

  function div_f32 (x:f32) (y:f32) : f32 = F32.(./) x y
  function div_f64 (x:f64) (y:f64) : f64 = F64.(./) x y

  (* Square Root *)

  function sqrt_f32 (x: f32) : f32 = F32.sqrt Rounding.RNE x
  function sqrt_f64 (x: f64) : f64 = F64.sqrt Rounding.RNE x

  (* Models *)

  function model_f32 (f:f32) : real
  function delta_f32 (f:f32) : real = abs( of_f32 f -. model_f32 f )
  function error_f32 (f:f32) : real = (delta_f32 f) /. (abs (model_f32 f))

  function model_f64 (f:f64) : real
  function delta_f64 (f:f64) : real = abs( of_f64 f -. model_f64 f )
  function error_f64 (f:f64) : real = (delta_f64 f) /. (abs (model_f64 f))

  (* [added] Abs *)

  function abs_f32 (x: f32) : f32 = F32.abs x
  function abs_f64 (x: f64) : f64 = F64.abs x

  (* [added] Ulp *)

  function ulp_f32 (x: real) : real = (F32.round Rounding.RTP x) - (F32.round Rounding.RTN x)
  function ulp_f64 (x: real) : real = (F64.round Rounding.RTP x) - (F64.round Rounding.RTN x)

end
