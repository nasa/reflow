Cfloat: THEORY
 BEGIN
  IMPORTING int@Int
  IMPORTING real@Real
  IMPORTING real@Abs
  IMPORTING real@FromInt
  IMPORTING real@Truncate
  IMPORTING real@Square
  IMPORTING bv@Pow2int
  IMPORTING ieee_float@RoundingMode
  IMPORTING ieee_float@Float32
  IMPORTING ieee_float@Float64
  IMPORTING ieee_float@FloatConverter
  % do not edit above this line
  % surround new declarations you insert below with blank lines
  
  % Why3 unit
  unit: TYPE+ = []
  
  % Why3 round_float
  round_float(m:ieee_float@RoundingMode.mode, r:real): single =
    round_nearest_even_single(round_to_exactly_representable_as_single(m,r))
  
  % Why3 round_double
  round_double(m:ieee_float@RoundingMode.mode, r:real): double =
    round_nearest_even_double(round_to_exactly_representable_as_double(m,r))
  
  % Why3 finite
  finite(x:real): bool = finite_single?(round_nearest_even_single(x)) AND
    finite_double?(round_nearest_even_double(x))
  
  % Why3 model_f32
  model_f32(x:single): real
  
  % Why3 delta_f32
  delta_f32(f:single): real = abs((safe_prjct_single(f) - model_f32(f)))
  
  % Why3 error_f32
  error_f32(f:single): real =
    real@Real.infix_sl(delta_f32(f), abs(model_f32(f)))
  
  % Why3 model_f64
  model_f64(x:double): real
  
  % Why3 delta_f64
  delta_f64(f:double): real = abs((safe_prjct_double(f) - model_f64(f)))
  
  % Why3 error_f64
  error_f64(f:double): real =
    real@Real.infix_sl(delta_f64(f), abs(model_f64(f)))
  
  % Obsolete chunk mode
  % mode: DATATYPE
  %  BEGIN
  %   rne: rne?
  %   rna: rna?
  %   rtp: rtp?
  %   rtn: rtn?
  %   rtz: rtz?
  %  END mode
  
  % Obsolete chunk to_nearest
  % to_nearest(m:mode): bool = (m = rne) OR (m = rna)
  
  % Obsolete chunk to_float64
  % to_float64(x:mode, x1:single): double
  
  % Obsolete chunk to_float32
  % to_float32(x:mode, x1:double): single
  
  % Obsolete chunk round_double_single
  % round_double_single: LEMMA FORALL (m1:mode, m2:mode, x:real):
  %   (ieee_float_Float64@Float64.round(m1,
  %   ieee_float_Float32@Float32.round(m2,
  %   x)) = ieee_float_Float32@Float32.round(m2, x))
  
  % Obsolete chunk to_float64_exact
  % to_float64_exact: LEMMA FORALL (m:mode, x:single): is_finite?(x) =>
  %   (is_finite?(to_float64(m, x)) AND (safe_prjct_double(to_float64(m,
  %   x)) = safe_prjct_double(x)))
  
  % Obsolete chunk to_float32_conv
  % to_float32_conv: LEMMA FORALL (m:mode, x:double): is_finite?(x) =>
  %   (ieee_float_Float32@Float32.no_overflow(m, safe_prjct_double(x)) =>
  %   (is_finite?(to_float32(m, x)) AND (safe_prjct_double(to_float32(m,
  %   x)) = ieee_float_Float32@Float32.round(m, safe_prjct_double(x)))))
  
  % Obsolete chunk t
  % t: TYPE+
  
  % Obsolete chunk tqtreal
  % tqtreal(x:t): real
  
  % Obsolete chunk tqtisfinite
  % tqtisfinite(x:t): bool
  
  % Obsolete chunk tqtaxiom
  % tqtaxiom: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   (((-(9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)) <= tqtreal(x)) AND
  %   (tqtreal(x) <= (9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)))
  
  % Obsolete chunk tqteb
  % tqteb: int = 11
  
  % Obsolete chunk tqtsb
  % tqtsb: int = 53
  
  % Obsolete chunk pow2sb
  % pow2sb: int = 9007199254740992
  
  % Obsolete chunk max_real
  % max_real: real =
  %   (9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)
  
  % Obsolete chunk zerof
  % zerof: t
  
  % Obsolete chunk add1
  % add1(x:mode, x1:t, x2:t): t
  
  % Obsolete chunk sub
  % sub(x:mode, x1:t, x2:t): t
  
  % Obsolete chunk mul
  % mul(x:mode, x1:t, x2:t): t
  
  % Obsolete chunk div
  % div(x:mode, x1:t, x2:t): t
  
  % Obsolete chunk abs1
  % abs1(x:t): t
  
  % Obsolete chunk neg
  % neg(x:t): t
  
  % Obsolete chunk fma
  % fma(x:mode, x1:t, x2:t, x3:t): t
  
  % Obsolete chunk sqrt
  % sqrt(x:mode, x1:t): t
  
  % Obsolete chunk prefix_dtmn
  % prefix_dtmn(x:t): t = neg(x)
  
  % Obsolete chunk infix_dtpl
  % infix_dtpl(x:t, y:t): t = add1(rne, x, y)
  
  % Obsolete chunk infix_dtmn
  % infix_dtmn(x:t, y:t): t = sub(rne, x, y)
  
  % Obsolete chunk infix_dtas
  % infix_dtas(x:t, y:t): t = mul(rne, x, y)
  
  % Obsolete chunk infix_dtsl
  % infix_dtsl(x:t, y:t): t = div(rne, x, y)
  
  % Obsolete chunk roundtointegral
  % roundtointegral(x:mode, x1:t): t
  
  % Obsolete chunk min1
  % min1(x:t, x1:t): t
  
  % Obsolete chunk max1
  % max1(x:t, x1:t): t
  
  % Obsolete chunk le
  % le(x:t, x1:t): bool
  
  % Obsolete chunk lt
  % lt(x:t, x1:t): bool
  
  % Obsolete chunk ge
  % ge(x:t, y:t): bool = le(y, x)
  
  % Obsolete chunk gt
  % gt(x:t, y:t): bool = lt(y, x)
  
  % Obsolete chunk eq1
  % eq1(x:t, x1:t): bool
  
  % Obsolete chunk infix_dtlseq
  % infix_dtlseq(x:t, y:t): bool = le(x, y)
  
  % Obsolete chunk infix_dtls
  % infix_dtls(x:t, y:t): bool = lt(x, y)
  
  % Obsolete chunk infix_dtgteq
  % infix_dtgteq(x:t, y:t): bool = ge(x, y)
  
  % Obsolete chunk infix_dtgt
  % infix_dtgt(x:t, y:t): bool = gt(x, y)
  
  % Obsolete chunk infix_dteq
  % infix_dteq(x:t, y:t): bool = eq1(x, y)
  
  % Obsolete chunk is_normal
  % is_normal(x:t): bool
  
  % Obsolete chunk is_subnormal
  % is_subnormal(x:t): bool
  
  % Obsolete chunk is_zero
  % is_zero(x:t): bool
  
  % Obsolete chunk is_infinite
  % is_infinite(x:t): bool
  
  % Obsolete chunk is_nan
  % is_nan(x:t): bool
  
  % Obsolete chunk is_positive
  % is_positive(x:t): bool
  
  % Obsolete chunk is_negative
  % is_negative(x:t): bool
  
  % Obsolete chunk is_plus_infinity
  % is_plus_infinity(x:t): bool = is_infinite(x) AND is_positive(x)
  
  % Obsolete chunk is_minus_infinity
  % is_minus_infinity(x:t): bool = is_infinite(x) AND is_negative(x)
  
  % Obsolete chunk is_plus_zero
  % is_plus_zero(x:t): bool = is_zero(x) AND is_positive(x)
  
  % Obsolete chunk is_minus_zero
  % is_minus_zero(x:t): bool = is_zero(x) AND is_negative(x)
  
  % Obsolete chunk is_not_nan
  % is_not_nan(x:t): bool = tqtisfinite(x) OR is_infinite(x)
  
  % Obsolete chunk is_not_nan1
  % is_not_nan1: LEMMA FORALL (x:t): is_not_nan(x) <=> NOT is_nan(x)
  
  % Obsolete chunk is_not_finite
  % is_not_finite: LEMMA FORALL (x:t): (NOT tqtisfinite(x)) <=>
  %   (is_infinite(x) OR is_nan(x))
  
  % Obsolete chunk zerof_is_positive
  % zerof_is_positive: LEMMA is_positive(zerof)
  
  % Obsolete chunk zerof_is_zero
  % zerof_is_zero: LEMMA is_zero(zerof)
  
  % Obsolete chunk zero_to_real
  % zero_to_real: LEMMA FORALL (x:t): is_zero(x) <=> (tqtisfinite(x) AND
  %   (tqtreal(x) = 0))
  
  % Obsolete chunk of_int
  % of_int(x:mode, x1:int): t
  
  % Obsolete chunk to_int
  % to_int(x:mode, x1:t): int
  
  % Obsolete chunk zero_of_int
  % zero_of_int: LEMMA FORALL (m:mode): (zerof = of_int(m, 0))
  
  % Obsolete chunk round
  % round(x:mode, x1:real): real
  
  % Obsolete chunk max_int
  % max_int: int
  
  % Obsolete chunk emax
  % emax: int = pow2((tqteb - 1))
  
  % Obsolete chunk max_real_int
  % max_real_int: LEMMA (max_real = (max_int :: real))
  
  % Obsolete chunk in_range
  % in_range(x:real): bool = ((-max_real) <= x) AND (x <= max_real)
  
  % Obsolete chunk in_int_range
  % in_int_range(i:int): bool = ((-max_int) <= i) AND (i <= max_int)
  
  % Obsolete chunk is_finite
  % is_finite: LEMMA FORALL (x:t): tqtisfinite(x) => in_range(tqtreal(x))
  
  % Obsolete chunk no_overflow
  % no_overflow(m:mode, x:real): bool = in_range(round(m, x))
  
  % Obsolete chunk bounded_real_no_overflow
  % bounded_real_no_overflow: LEMMA FORALL (m:mode, x:real): in_range(x) =>
  %   no_overflow(m, x)
  
  % Obsolete chunk round_monotonic
  % round_monotonic: LEMMA FORALL (m:mode, x:real, y:real): (x <= y) =>
  %   (round(m, x) <= round(m, y))
  
  % Obsolete chunk round_idempotent
  % round_idempotent: LEMMA FORALL (m1:mode, m2:mode, x:real): (round(m1,
  %   round(m2, x)) = round(m2, x))
  
  % Obsolete chunk round_to_real
  % round_to_real: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) => (round(m,
  %   tqtreal(x)) = tqtreal(x))
  
  % Obsolete chunk round_down_le
  % round_down_le: LEMMA FORALL (x:real): (round(rtn, x) <= x)
  
  % Obsolete chunk round_up_ge
  % round_up_ge: LEMMA FORALL (x:real): (round(rtp, x) >= x)
  
  % Obsolete chunk round_down_neg
  % round_down_neg: LEMMA FORALL (x:real): (round(rtn, (-x)) = (-round(rtp,
  %   x)))
  
  % Obsolete chunk round_up_neg
  % round_up_neg: LEMMA FORALL (x:real): (round(rtp, (-x)) = (-round(rtn, x)))
  
  % Obsolete chunk in_safe_int_range
  % in_safe_int_range(i:int): bool = ((-pow2sb) <= i) AND (i <= pow2sb)
  
  % Obsolete chunk exact_rounding_for_integers
  % exact_rounding_for_integers: LEMMA FORALL (m:mode, i:int):
  %   in_safe_int_range(i) => (round(m, (i :: real)) = (i :: real))
  
  % Obsolete chunk same_sign
  % same_sign(x:t, y:t): bool = (is_positive(x) AND is_positive(y)) OR
  %   (is_negative(x) AND is_negative(y))
  
  % Obsolete chunk diff_sign
  % diff_sign(x:t, y:t): bool = (is_positive(x) AND is_negative(y)) OR
  %   (is_negative(x) AND is_positive(y))
  
  % Obsolete chunk feq_eq
  % feq_eq: LEMMA FORALL (x:t, y:t): tqtisfinite(x) => (tqtisfinite(y) =>
  %   ((NOT is_zero(x)) => (infix_dteq(x, y) => (x = y))))
  
  % Obsolete chunk eq_feq
  % eq_feq: LEMMA FORALL (x:t, y:t): tqtisfinite(x) => (tqtisfinite(y) =>
  %   ((x = y) => infix_dteq(x, y)))
  
  % Obsolete chunk eq_refl
  % eq_refl: LEMMA FORALL (x:t): tqtisfinite(x) => infix_dteq(x, x)
  
  % Obsolete chunk eq_sym
  % eq_sym: LEMMA FORALL (x:t, y:t): infix_dteq(x, y) => infix_dteq(y, x)
  
  % Obsolete chunk eq_trans
  % eq_trans: LEMMA FORALL (x:t, y:t, z:t): infix_dteq(x, y) => (infix_dteq(y,
  %   z) => infix_dteq(x, z))
  
  % Obsolete chunk eq_zero
  % eq_zero: LEMMA infix_dteq(zerof, prefix_dtmn(zerof))
  
  % Obsolete chunk eq_to_real_finite
  % eq_to_real_finite: LEMMA FORALL (x:t, y:t): (tqtisfinite(x) AND
  %   tqtisfinite(y)) => (infix_dteq(x, y) <=> (tqtreal(x) = tqtreal(y)))
  
  % Obsolete chunk eq_special
  % eq_special: LEMMA FORALL (x:t, y:t): infix_dteq(x, y) => (is_not_nan(x) AND
  %   (is_not_nan(y) AND ((tqtisfinite(x) AND tqtisfinite(y)) OR
  %   (is_infinite(x) AND (is_infinite(y) AND same_sign(x, y))))))
  
  % Obsolete chunk lt_finite
  % lt_finite: LEMMA FORALL (x:t, y:t): (tqtisfinite(x) AND tqtisfinite(y)) =>
  %   (lt(x, y) <=> (tqtreal(x) <  tqtreal(y)))
  
  % Obsolete chunk le_finite
  % le_finite: LEMMA FORALL (x:t, y:t): (tqtisfinite(x) AND tqtisfinite(y)) =>
  %   (le(x, y) <=> (tqtreal(x) <= tqtreal(y)))
  
  % Obsolete chunk le_lt_trans
  % le_lt_trans: LEMMA FORALL (x:t, y:t, z:t): (infix_dtlseq(x, y) AND
  %   infix_dtls(y, z)) => infix_dtls(x, z)
  
  % Obsolete chunk lt_le_trans
  % lt_le_trans: LEMMA FORALL (x:t, y:t, z:t): (infix_dtls(x, y) AND
  %   infix_dtlseq(y, z)) => infix_dtls(x, z)
  
  % Obsolete chunk le_ge_asym
  % le_ge_asym: LEMMA FORALL (x:t, y:t): (infix_dtlseq(x, y) AND
  %   infix_dtgteq(x, y)) => infix_dteq(x, y)
  
  % Obsolete chunk not_lt_ge
  % not_lt_ge: LEMMA FORALL (x:t, y:t): ((NOT infix_dtls(x, y)) AND
  %   (is_not_nan(x) AND is_not_nan(y))) => infix_dtgteq(x, y)
  
  % Obsolete chunk not_gt_le
  % not_gt_le: LEMMA FORALL (x:t, y:t): ((NOT infix_dtgt(x, y)) AND
  %   (is_not_nan(x) AND is_not_nan(y))) => infix_dtlseq(x, y)
  
  % Obsolete chunk le_special
  % le_special: LEMMA FORALL (x:t, y:t): le(x, y) => ((tqtisfinite(x) AND
  %   tqtisfinite(y)) OR ((is_minus_infinity(x) AND is_not_nan(y)) OR
  %   (is_not_nan(x) AND is_plus_infinity(y))))
  
  % Obsolete chunk lt_special
  % lt_special: LEMMA FORALL (x:t, y:t): lt(x, y) => ((tqtisfinite(x) AND
  %   tqtisfinite(y)) OR ((is_minus_infinity(x) AND (is_not_nan(y) AND
  %   NOT is_minus_infinity(y))) OR (is_not_nan(x) AND
  %   ((NOT is_plus_infinity(x)) AND is_plus_infinity(y)))))
  
  % Obsolete chunk lt_lt_finite
  % lt_lt_finite: LEMMA FORALL (x:t, y:t, z:t): lt(x, y) => (lt(y, z) =>
  %   tqtisfinite(y))
  
  % Obsolete chunk positive_to_real
  % positive_to_real: LEMMA FORALL (x:t): tqtisfinite(x) => (is_positive(x) =>
  %   (tqtreal(x) >= 0))
  
  % Obsolete chunk to_real_positive
  % to_real_positive: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   ((tqtreal(x) >  0) => is_positive(x))
  
  % Obsolete chunk negative_to_real
  % negative_to_real: LEMMA FORALL (x:t): tqtisfinite(x) => (is_negative(x) =>
  %   (tqtreal(x) <= 0))
  
  % Obsolete chunk to_real_negative
  % to_real_negative: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   ((tqtreal(x) <  0) => is_negative(x))
  
  % Obsolete chunk negative_xor_positive
  % negative_xor_positive: LEMMA FORALL (x:t): NOT (is_positive(x) AND
  %   is_negative(x))
  
  % Obsolete chunk negative_or_positive
  % negative_or_positive: LEMMA FORALL (x:t): is_not_nan(x) =>
  %   (is_positive(x) OR is_negative(x))
  
  % Obsolete chunk diff_sign_trans
  % diff_sign_trans: LEMMA FORALL (x:t, y:t, z:t): (diff_sign(x, y) AND
  %   diff_sign(y, z)) => same_sign(x, z)
  
  % Obsolete chunk diff_sign_product
  % diff_sign_product: LEMMA FORALL (x:t, y:t): (tqtisfinite(x) AND
  %   (tqtisfinite(y) AND ((tqtreal(x) * tqtreal(y)) <  0))) => diff_sign(x, y)
  
  % Obsolete chunk same_sign_product
  % same_sign_product: LEMMA FORALL (x:t, y:t): (tqtisfinite(x) AND
  %   (tqtisfinite(y) AND same_sign(x, y))) => ((tqtreal(x) * tqtreal(y)) >= 0)
  
  % Obsolete chunk product_sign
  % product_sign(z:t, x:t, y:t): bool = (same_sign(x, y) => is_positive(z)) AND
  %   (diff_sign(x, y) => is_negative(z))
  
  % Obsolete chunk overflow_value
  % overflow_value(m:mode, x:t): bool =
  %   CASES m OF
  %    rtn: IF is_positive(x) THEN tqtisfinite(x) AND (tqtreal(x) = max_real)
  %       ELSE is_infinite(x) ENDIF,
  %    rtp: IF is_positive(x) THEN is_infinite(x) ELSE (tqtisfinite(x) AND
  %       (tqtreal(x) = (-max_real))) ENDIF,
  %    rtz: IF is_positive(x) THEN tqtisfinite(x) AND (tqtreal(x) = max_real)
  %       ELSE (tqtisfinite(x) AND (tqtreal(x) = (-max_real))) ENDIF,
  %    rna: is_infinite(x),
  %    rne: is_infinite(x)
  %   ENDCASES
  
  % Obsolete chunk sign_zero_result
  % sign_zero_result(m:mode, x:t): bool = is_zero(x) =>
  %   CASES m OF
  %    rtn: is_negative(x)
  %   ELSE is_positive(x)
  %   ENDCASES
  
  % Obsolete chunk add_finite
  % add_finite: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => (no_overflow(m, (tqtreal(x) + tqtreal(y))) =>
  %   (tqtisfinite(add1(m, x, y)) AND (tqtreal(add1(m, x, y)) = round(m,
  %   (tqtreal(x) + tqtreal(y)))))))
  
  % Obsolete chunk add_finite_rev
  % add_finite_rev: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(add1(m, x,
  %   y)) => (tqtisfinite(x) AND tqtisfinite(y))
  
  % Obsolete chunk add_finite_rev_n
  % add_finite_rev_n: LEMMA FORALL (m:mode, x:t, y:t): to_nearest(m) =>
  %   (tqtisfinite(add1(m, x, y)) => (no_overflow(m,
  %   (tqtreal(x) + tqtreal(y))) AND (tqtreal(add1(m, x, y)) = round(m,
  %   (tqtreal(x) + tqtreal(y))))))
  
  % Obsolete chunk sub_finite
  % sub_finite: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => (no_overflow(m, (tqtreal(x) - tqtreal(y))) =>
  %   (tqtisfinite(sub(m, x, y)) AND (tqtreal(sub(m, x, y)) = round(m,
  %   (tqtreal(x) - tqtreal(y)))))))
  
  % Obsolete chunk sub_finite_rev
  % sub_finite_rev: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(sub(m, x,
  %   y)) => (tqtisfinite(x) AND tqtisfinite(y))
  
  % Obsolete chunk sub_finite_rev_n
  % sub_finite_rev_n: LEMMA FORALL (m:mode, x:t, y:t): to_nearest(m) =>
  %   (tqtisfinite(sub(m, x, y)) => (no_overflow(m,
  %   (tqtreal(x) - tqtreal(y))) AND (tqtreal(sub(m, x, y)) = round(m,
  %   (tqtreal(x) - tqtreal(y))))))
  
  % Obsolete chunk mul_finite
  % mul_finite: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => (no_overflow(m, (tqtreal(x) * tqtreal(y))) =>
  %   (tqtisfinite(mul(m, x, y)) AND (tqtreal(mul(m, x, y)) = round(m,
  %   (tqtreal(x) * tqtreal(y)))))))
  
  % Obsolete chunk mul_finite_rev
  % mul_finite_rev: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(mul(m, x,
  %   y)) => (tqtisfinite(x) AND tqtisfinite(y))
  
  % Obsolete chunk mul_finite_rev_n
  % mul_finite_rev_n: LEMMA FORALL (m:mode, x:t, y:t): to_nearest(m) =>
  %   (tqtisfinite(mul(m, x, y)) => (no_overflow(m,
  %   (tqtreal(x) * tqtreal(y))) AND (tqtreal(mul(m, x, y)) = round(m,
  %   (tqtreal(x) * tqtreal(y))))))
  
  % Obsolete chunk div_finite
  % div_finite: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => ((NOT is_zero(y)) => (no_overflow(m,
  %   real@Real.infix_sl(tqtreal(x), tqtreal(y))) => (tqtisfinite(div(m, x,
  %   y)) AND (tqtreal(div(m, x, y)) = round(m,
  %   real@Real.infix_sl(tqtreal(x), tqtreal(y))))))))
  
  % Obsolete chunk div_finite_rev
  % div_finite_rev: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(div(m, x,
  %   y)) => ((tqtisfinite(x) AND (tqtisfinite(y) AND NOT is_zero(y))) OR
  %   (tqtisfinite(x) AND (is_infinite(y) AND (tqtreal(div(m, x, y)) = 0))))
  
  % Obsolete chunk div_finite_rev_n
  % div_finite_rev_n: LEMMA FORALL (m:mode, x:t, y:t): to_nearest(m) =>
  %   (tqtisfinite(div(m, x, y)) => (tqtisfinite(y) => (no_overflow(m,
  %   real@Real.infix_sl(tqtreal(x), tqtreal(y))) AND (tqtreal(div(m, x,
  %   y)) = round(m, real@Real.infix_sl(tqtreal(x), tqtreal(y)))))))
  
  % Obsolete chunk neg_finite
  % neg_finite: LEMMA FORALL (x:t): tqtisfinite(x) => (tqtisfinite(neg(x)) AND
  %   (tqtreal(neg(x)) = (-tqtreal(x))))
  
  % Obsolete chunk neg_finite_rev
  % neg_finite_rev: LEMMA FORALL (x:t): tqtisfinite(neg(x)) =>
  %   (tqtisfinite(x) AND (tqtreal(neg(x)) = (-tqtreal(x))))
  
  % Obsolete chunk abs_finite
  % abs_finite: LEMMA FORALL (x:t): tqtisfinite(x) => (tqtisfinite(abs1(x)) AND
  %   ((tqtreal(abs1(x)) = abs(tqtreal(x))) AND is_positive(abs1(x))))
  
  % Obsolete chunk abs_finite_rev
  % abs_finite_rev: LEMMA FORALL (x:t): tqtisfinite(abs1(x)) =>
  %   (tqtisfinite(x) AND (tqtreal(abs1(x)) = abs(tqtreal(x))))
  
  % Obsolete chunk abs_universal
  % abs_universal: LEMMA FORALL (x:t): NOT is_negative(abs1(x))
  
  % Obsolete chunk fma_finite
  % fma_finite: LEMMA FORALL (m:mode, x:t, y:t, z:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => (tqtisfinite(z) => (no_overflow(m,
  %   ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) => (tqtisfinite(fma(m, x, y,
  %   z)) AND (tqtreal(fma(m, x, y, z)) = round(m,
  %   ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))))
  
  % Obsolete chunk fma_finite_rev
  % fma_finite_rev: LEMMA FORALL (m:mode, x:t, y:t, z:t): tqtisfinite(fma(m, x,
  %   y, z)) => (tqtisfinite(x) AND (tqtisfinite(y) AND tqtisfinite(z)))
  
  % Obsolete chunk fma_finite_rev_n
  % fma_finite_rev_n: LEMMA FORALL (m:mode, x:t, y:t, z:t): to_nearest(m) =>
  %   (tqtisfinite(fma(m, x, y, z)) => (no_overflow(m,
  %   ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) AND (tqtreal(fma(m, x, y,
  %   z)) = round(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))
  
  % Obsolete chunk sqrt_finite
  % sqrt_finite: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) =>
  %   ((tqtreal(x) >= 0) => (tqtisfinite(sqrt(m, x)) AND (tqtreal(sqrt(m,
  %   x)) = round(m, real@Square.sqrt(tqtreal(x))))))
  
  % Obsolete chunk sqrt_finite_rev
  % sqrt_finite_rev: LEMMA FORALL (m:mode, x:t): tqtisfinite(sqrt(m, x)) =>
  %   (tqtisfinite(x) AND ((tqtreal(x) >= 0) AND (tqtreal(sqrt(m,
  %   x)) = round(m, real@Square.sqrt(tqtreal(x))))))
  
  % Obsolete chunk same_sign_real
  % same_sign_real(x:t, r:real): bool = (is_positive(x) AND (r >  0)) OR
  %   (is_negative(x) AND (r <  0))
  
  % Obsolete chunk add_special
  % add_special: LEMMA FORALL (m:mode, x:t, y:t): LET r = add1(m, x, y) IN
  %   (((is_nan(x) OR is_nan(y)) => is_nan(r)) AND (((tqtisfinite(x) AND
  %   is_infinite(y)) => (is_infinite(r) AND same_sign(r, y))) AND
  %   (((is_infinite(x) AND tqtisfinite(y)) => (is_infinite(r) AND same_sign(r,
  %   x))) AND (((is_infinite(x) AND (is_infinite(y) AND same_sign(x, y))) =>
  %   (is_infinite(r) AND same_sign(r, x))) AND (((is_infinite(x) AND
  %   (is_infinite(y) AND diff_sign(x, y))) => is_nan(r)) AND
  %   (((tqtisfinite(x) AND (tqtisfinite(y) AND NOT no_overflow(m,
  %   (tqtreal(x) + tqtreal(y))))) => (same_sign_real(r,
  %   (tqtreal(x) + tqtreal(y))) AND overflow_value(m, r))) AND
  %   ((tqtisfinite(x) AND tqtisfinite(y)) => IF same_sign(x, y)
  %   THEN same_sign(r, x) ELSE sign_zero_result(m, r) ENDIF)))))))
  
  % Obsolete chunk sub_special
  % sub_special: LEMMA FORALL (m:mode, x:t, y:t): LET r = sub(m, x, y) IN
  %   (((is_nan(x) OR is_nan(y)) => is_nan(r)) AND (((tqtisfinite(x) AND
  %   is_infinite(y)) => (is_infinite(r) AND diff_sign(r, y))) AND
  %   (((is_infinite(x) AND tqtisfinite(y)) => (is_infinite(r) AND same_sign(r,
  %   x))) AND (((is_infinite(x) AND (is_infinite(y) AND same_sign(x, y))) =>
  %   is_nan(r)) AND (((is_infinite(x) AND (is_infinite(y) AND diff_sign(x,
  %   y))) => (is_infinite(r) AND same_sign(r, x))) AND (((tqtisfinite(x) AND
  %   (tqtisfinite(y) AND NOT no_overflow(m, (tqtreal(x) - tqtreal(y))))) =>
  %   (same_sign_real(r, (tqtreal(x) - tqtreal(y))) AND overflow_value(m,
  %   r))) AND ((tqtisfinite(x) AND tqtisfinite(y)) => IF diff_sign(x, y)
  %   THEN same_sign(r, x) ELSE sign_zero_result(m, r) ENDIF)))))))
  
  % Obsolete chunk mul_special
  % mul_special: LEMMA FORALL (m:mode, x:t, y:t): LET r = mul(m, x, y) IN
  %   (((is_nan(x) OR is_nan(y)) => is_nan(r)) AND (((is_zero(x) AND
  %   is_infinite(y)) => is_nan(r)) AND (((tqtisfinite(x) AND
  %   (is_infinite(y) AND NOT is_zero(x))) => is_infinite(r)) AND
  %   (((is_infinite(x) AND is_zero(y)) => is_nan(r)) AND (((is_infinite(x) AND
  %   (tqtisfinite(y) AND NOT is_zero(y))) => is_infinite(r)) AND
  %   (((is_infinite(x) AND is_infinite(y)) => is_infinite(r)) AND
  %   (((tqtisfinite(x) AND (tqtisfinite(y) AND NOT no_overflow(m,
  %   (tqtreal(x) * tqtreal(y))))) => overflow_value(m, r)) AND
  %   ((NOT is_nan(r)) => product_sign(r, x, y)))))))))
  
  % Obsolete chunk div_special
  % div_special: LEMMA FORALL (m:mode, x:t, y:t): LET r = div(m, x, y) IN
  %   (((is_nan(x) OR is_nan(y)) => is_nan(r)) AND (((tqtisfinite(x) AND
  %   is_infinite(y)) => is_zero(r)) AND (((is_infinite(x) AND
  %   tqtisfinite(y)) => is_infinite(r)) AND (((is_infinite(x) AND
  %   is_infinite(y)) => is_nan(r)) AND (((tqtisfinite(x) AND
  %   (tqtisfinite(y) AND ((NOT is_zero(y)) AND NOT no_overflow(m,
  %   real@Real.infix_sl(tqtreal(x), tqtreal(y)))))) => overflow_value(m,
  %   r)) AND (((tqtisfinite(x) AND (is_zero(y) AND NOT is_zero(x))) =>
  %   is_infinite(r)) AND (((is_zero(x) AND is_zero(y)) => is_nan(r)) AND
  %   ((NOT is_nan(r)) => product_sign(r, x, y)))))))))
  
  % Obsolete chunk neg_special
  % neg_special: LEMMA FORALL (x:t): (is_nan(x) => is_nan(neg(x))) AND
  %   ((is_infinite(x) => is_infinite(neg(x))) AND ((NOT is_nan(x)) =>
  %   diff_sign(x, neg(x))))
  
  % Obsolete chunk abs_special
  % abs_special: LEMMA FORALL (x:t): (is_nan(x) => is_nan(abs1(x))) AND
  %   ((is_infinite(x) => is_infinite(abs1(x))) AND ((NOT is_nan(x)) =>
  %   is_positive(abs1(x))))
  
  % Obsolete chunk fma_special
  % fma_special: LEMMA FORALL (m:mode, x:t, y:t, z:t): LET r = fma(m, x, y,
  %   z) IN (((is_nan(x) OR (is_nan(y) OR is_nan(z))) => is_nan(r)) AND
  %   (((is_zero(x) AND is_infinite(y)) => is_nan(r)) AND (((is_infinite(x) AND
  %   is_zero(y)) => is_nan(r)) AND (((tqtisfinite(x) AND ((NOT is_zero(x)) AND
  %   (is_infinite(y) AND tqtisfinite(z)))) => (is_infinite(r) AND
  %   product_sign(r, x, y))) AND (((tqtisfinite(x) AND ((NOT is_zero(x)) AND
  %   (is_infinite(y) AND is_infinite(z)))) => IF product_sign(z, x, y)
  %   THEN is_infinite(r) AND same_sign(r, z) ELSE is_nan(r) ENDIF) AND
  %   (((is_infinite(x) AND (tqtisfinite(y) AND ((NOT is_zero(y)) AND
  %   tqtisfinite(z)))) => (is_infinite(r) AND product_sign(r, x, y))) AND
  %   (((is_infinite(x) AND (tqtisfinite(y) AND ((NOT is_zero(y)) AND
  %   is_infinite(z)))) => IF product_sign(z, x, y) THEN is_infinite(r) AND
  %   same_sign(r, z) ELSE is_nan(r) ENDIF) AND (((is_infinite(x) AND
  %   (is_infinite(y) AND tqtisfinite(z))) => (is_infinite(r) AND
  %   product_sign(r, x, y))) AND (((tqtisfinite(x) AND (tqtisfinite(y) AND
  %   is_infinite(z))) => (is_infinite(r) AND same_sign(r, z))) AND
  %   (((is_infinite(x) AND (is_infinite(y) AND is_infinite(z))) =>
  %   IF product_sign(z, x, y) THEN is_infinite(r) AND same_sign(r, z)
  %   ELSE is_nan(r) ENDIF) AND (((tqtisfinite(x) AND (tqtisfinite(y) AND
  %   (tqtisfinite(z) AND NOT no_overflow(m,
  %   ((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))) => (same_sign_real(r,
  %   ((tqtreal(x) * tqtreal(y)) + tqtreal(z))) AND overflow_value(m, r))) AND
  %   ((tqtisfinite(x) AND (tqtisfinite(y) AND tqtisfinite(z))) =>
  %   IF product_sign(z, x, y) THEN same_sign(r, z)
  %   ELSE ((((tqtreal(x) * tqtreal(y)) + tqtreal(z)) = 0) => IF (m = rtn)
  %   THEN is_negative(r) ELSE is_positive(r) ENDIF) ENDIF))))))))))))
  
  % Obsolete chunk sqrt_special
  % sqrt_special: LEMMA FORALL (m:mode, x:t): LET r = sqrt(m, x) IN
  %   ((is_nan(x) => is_nan(r)) AND ((is_plus_infinity(x) =>
  %   is_plus_infinity(r)) AND ((is_minus_infinity(x) => is_nan(r)) AND
  %   (((tqtisfinite(x) AND (tqtreal(x) <  0)) => is_nan(r)) AND
  %   ((is_zero(x) => same_sign(r, x)) AND ((tqtisfinite(x) AND
  %   (tqtreal(x) >  0)) => is_positive(r)))))))
  
  % Obsolete chunk of_int_add_exact
  % of_int_add_exact: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range(i) => (in_safe_int_range(j) =>
  %   (in_safe_int_range((i + j)) => eq1(of_int(m, (i + j)), add1(n, of_int(m,
  %   i), of_int(m, j)))))
  
  % Obsolete chunk of_int_sub_exact
  % of_int_sub_exact: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range(i) => (in_safe_int_range(j) =>
  %   (in_safe_int_range((i - j)) => eq1(of_int(m, (i - j)), sub(n, of_int(m,
  %   i), of_int(m, j)))))
  
  % Obsolete chunk of_int_mul_exact
  % of_int_mul_exact: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range(i) => (in_safe_int_range(j) =>
  %   (in_safe_int_range((i * j)) => eq1(of_int(m, (i * j)), mul(n, of_int(m,
  %   i), of_int(m, j)))))
  
  % Obsolete chunk min_r
  % min_r: LEMMA FORALL (x:t, y:t): infix_dtlseq(y, x) => infix_dteq(min1(x,
  %   y), y)
  
  % Obsolete chunk min_l
  % min_l: LEMMA FORALL (x:t, y:t): infix_dtlseq(x, y) => infix_dteq(min1(x,
  %   y), x)
  
  % Obsolete chunk max_r
  % max_r: LEMMA FORALL (x:t, y:t): infix_dtlseq(y, x) => infix_dteq(max1(x,
  %   y), x)
  
  % Obsolete chunk max_l
  % max_l: LEMMA FORALL (x:t, y:t): infix_dtlseq(x, y) => infix_dteq(max1(x,
  %   y), y)
  
  % Obsolete chunk is_int
  % is_int(x:t): bool
  
  % Obsolete chunk zerof_is_int
  % zerof_is_int: LEMMA is_int(zerof)
  
  % Obsolete chunk of_int_is_int
  % of_int_is_int: LEMMA FORALL (m:mode, x:int): in_int_range(x) =>
  %   is_int(of_int(m, x))
  
  % Obsolete chunk big_float_is_int
  % big_float_is_int: LEMMA FORALL (m:mode, i:t): tqtisfinite(i) =>
  %   ((infix_dtlseq(i, neg(of_int(m, pow2sb))) OR infix_dtlseq(of_int(m,
  %   pow2sb), i)) => is_int(i))
  
  % Obsolete chunk roundtointegral_is_int
  % roundtointegral_is_int: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) =>
  %   is_int(roundtointegral(m, x))
  
  % Obsolete chunk eq_is_int
  % eq_is_int: LEMMA FORALL (x:t, y:t): eq1(x, y) => (is_int(x) => is_int(y))
  
  % Obsolete chunk add_int
  % add_int: LEMMA FORALL (x:t, y:t, m:mode): is_int(x) => (is_int(y) =>
  %   (tqtisfinite(add1(m, x, y)) => is_int(add1(m, x, y))))
  
  % Obsolete chunk sub_int
  % sub_int: LEMMA FORALL (x:t, y:t, m:mode): is_int(x) => (is_int(y) =>
  %   (tqtisfinite(sub(m, x, y)) => is_int(sub(m, x, y))))
  
  % Obsolete chunk mul_int
  % mul_int: LEMMA FORALL (x:t, y:t, m:mode): is_int(x) => (is_int(y) =>
  %   (tqtisfinite(mul(m, x, y)) => is_int(mul(m, x, y))))
  
  % Obsolete chunk fma_int
  % fma_int: LEMMA FORALL (x:t, y:t, z:t, m:mode): is_int(x) => (is_int(y) =>
  %   (is_int(z) => (tqtisfinite(fma(m, x, y, z)) => is_int(fma(m, x, y, z)))))
  
  % Obsolete chunk neg_int
  % neg_int: LEMMA FORALL (x:t): is_int(x) => is_int(neg(x))
  
  % Obsolete chunk abs_int
  % abs_int: LEMMA FORALL (x:t): is_int(x) => is_int(abs1(x))
  
  % Obsolete chunk is_int_of_int
  % is_int_of_int: LEMMA FORALL (x:t, m:mode, mqt:mode): is_int(x) => eq1(x,
  %   of_int(mqt, to_int(m, x)))
  
  % Obsolete chunk is_int_to_int
  % is_int_to_int: LEMMA FORALL (m:mode, x:t): is_int(x) =>
  %   in_int_range(to_int(m, x))
  
  % Obsolete chunk is_int_is_finite
  % is_int_is_finite: LEMMA FORALL (x:t): is_int(x) => tqtisfinite(x)
  
  % Obsolete chunk int_to_real
  % int_to_real: LEMMA FORALL (m:mode, x:t): is_int(x) =>
  %   (tqtreal(x) = (to_int(m, x) :: real))
  
  % Obsolete chunk truncate_int
  % truncate_int: LEMMA FORALL (m:mode, i:t): is_int(i) =>
  %   infix_dteq(roundtointegral(m, i), i)
  
  % Obsolete chunk truncate_neg
  % truncate_neg: LEMMA FORALL (x:t): tqtisfinite(x) => (is_negative(x) =>
  %   (roundtointegral(rtz, x) = roundtointegral(rtp, x)))
  
  % Obsolete chunk truncate_pos
  % truncate_pos: LEMMA FORALL (x:t): tqtisfinite(x) => (is_positive(x) =>
  %   (roundtointegral(rtz, x) = roundtointegral(rtn, x)))
  
  % Obsolete chunk ceil_le
  % ceil_le: LEMMA FORALL (x:t): tqtisfinite(x) => infix_dtlseq(x,
  %   roundtointegral(rtp, x))
  
  % Obsolete chunk ceil_lest
  % ceil_lest: LEMMA FORALL (x:t, y:t): (infix_dtlseq(x, y) AND is_int(y)) =>
  %   infix_dtlseq(roundtointegral(rtp, x), y)
  
  % Obsolete chunk ceil_to_real
  % ceil_to_real: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   (tqtreal(roundtointegral(rtp, x)) = (ceil(tqtreal(x)) :: real))
  
  % Obsolete chunk ceil_to_int
  % ceil_to_int: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) => (to_int(m,
  %   roundtointegral(rtp, x)) = ceil(tqtreal(x)))
  
  % Obsolete chunk floor_le
  % floor_le: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   infix_dtlseq(roundtointegral(rtn, x), x)
  
  % Obsolete chunk floor_lest
  % floor_lest: LEMMA FORALL (x:t, y:t): (infix_dtlseq(y, x) AND is_int(y)) =>
  %   infix_dtlseq(y, roundtointegral(rtn, x))
  
  % Obsolete chunk floor_to_real
  % floor_to_real: LEMMA FORALL (x:t): tqtisfinite(x) =>
  %   (tqtreal(roundtointegral(rtn, x)) = (floor(tqtreal(x)) :: real))
  
  % Obsolete chunk floor_to_int
  % floor_to_int: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) => (to_int(m,
  %   roundtointegral(rtn, x)) = floor(tqtreal(x)))
  
  % Obsolete chunk rna_down
  % rna_down: LEMMA FORALL (x:t): infix_dtls(infix_dtmn(x, roundtointegral(rtn,
  %   x)), infix_dtmn(roundtointegral(rtp, x), x)) => (roundtointegral(rna,
  %   x) = roundtointegral(rtn, x))
  
  % Obsolete chunk rna_up
  % rna_up: LEMMA FORALL (x:t): infix_dtgt(infix_dtmn(x, roundtointegral(rtn,
  %   x)), infix_dtmn(roundtointegral(rtp, x), x)) => (roundtointegral(rna,
  %   x) = roundtointegral(rtp, x))
  
  % Obsolete chunk rna_down_tie
  % rna_down_tie: LEMMA FORALL (x:t): infix_dteq(infix_dtmn(x,
  %   roundtointegral(rtn, x)), infix_dtmn(roundtointegral(rtp, x), x)) =>
  %   (is_negative(x) => (roundtointegral(rna, x) = roundtointegral(rtn, x)))
  
  % Obsolete chunk rna_up_tie
  % rna_up_tie: LEMMA FORALL (x:t): infix_dteq(infix_dtmn(roundtointegral(rtp,
  %   x), x), infix_dtmn(x, roundtointegral(rtn, x))) => (is_positive(x) =>
  %   (roundtointegral(rna, x) = roundtointegral(rtp, x)))
  
  % Obsolete chunk to_int_roundtointegral
  % to_int_roundtointegral: LEMMA FORALL (m:mode, x:t): (to_int(m,
  %   x) = to_int(m, roundtointegral(m, x)))
  
  % Obsolete chunk to_int_monotonic
  % to_int_monotonic: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (tqtisfinite(y) => (le(x, y) => (to_int(m, x) <= to_int(m, y))))
  
  % Obsolete chunk to_int_of_int
  % to_int_of_int: LEMMA FORALL (m:mode, i:int): in_safe_int_range(i) =>
  %   (to_int(m, of_int(m, i)) = i)
  
  % Obsolete chunk eq_to_int
  % eq_to_int: LEMMA FORALL (m:mode, x:t, y:t): tqtisfinite(x) =>
  %   (infix_dteq(x, y) => (to_int(m, x) = to_int(m, y)))
  
  % Obsolete chunk neg_to_int
  % neg_to_int: LEMMA FORALL (m:mode, x:t): is_int(x) => (to_int(m,
  %   neg(x)) = (-to_int(m, x)))
  
  % Obsolete chunk roundtointegral_is_finite
  % roundtointegral_is_finite: LEMMA FORALL (m:mode, x:t): tqtisfinite(x) =>
  %   tqtisfinite(roundtointegral(m, x))
  
  % Obsolete chunk round_bound_ne
  % round_bound_ne: LEMMA FORALL (x:real): no_overflow(rne, x) =>
  %   ((((x - ((1 / 9007199254740992) * abs(x))) - (1 / 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568)) <= round(rne,
  %   x)) AND (round(rne,
  %   x) <= ((x + ((1 / 9007199254740992) * abs(x))) + (1 / 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568))))
  
  % Obsolete chunk round_bound
  % round_bound: LEMMA FORALL (m:mode, x:real): no_overflow(m, x) =>
  %   ((((x - ((1 / 4503599627370496) * abs(x))) - (1 / 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784)) <= round(m,
  %   x)) AND (round(m,
  %   x) <= ((x + ((1 / 4503599627370496) * abs(x))) + (1 / 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784))))
  
  % Obsolete chunk pow2
  % pow2(x:int): int
  
  % Obsolete chunk power_0
  % power_0: LEMMA (pow2(0) = 1)
  
  % Obsolete chunk power_s
  % power_s: LEMMA FORALL (n:int): (n >= 0) => (pow2((n + 1)) = (2 * pow2(n)))
  
  % Obsolete chunk power_1
  % power_1: LEMMA (pow2(1) = 2)
  
  % Obsolete chunk power_sum
  % power_sum: LEMMA FORALL (n:int, m:int): ((n >= 0) AND (m >= 0)) =>
  %   (pow2((n + m)) = (pow2(n) * pow2(m)))
  
  % Obsolete chunk pow2pos
  % pow2pos: LEMMA FORALL (i:int): (i >= 0) => (pow2(i) >  0)
  
  % Obsolete chunk pow2_0
  % pow2_0: LEMMA (pow2(0) = 1)
  
  % Obsolete chunk pow2_1
  % pow2_1: LEMMA (pow2(1) = 2)
  
  % Obsolete chunk pow2_2
  % pow2_2: LEMMA (pow2(2) = 4)
  
  % Obsolete chunk pow2_3
  % pow2_3: LEMMA (pow2(3) = 8)
  
  % Obsolete chunk pow2_4
  % pow2_4: LEMMA (pow2(4) = 16)
  
  % Obsolete chunk pow2_5
  % pow2_5: LEMMA (pow2(5) = 32)
  
  % Obsolete chunk pow2_6
  % pow2_6: LEMMA (pow2(6) = 64)
  
  % Obsolete chunk pow2_7
  % pow2_7: LEMMA (pow2(7) = 128)
  
  % Obsolete chunk pow2_8
  % pow2_8: LEMMA (pow2(8) = 256)
  
  % Obsolete chunk pow2_9
  % pow2_9: LEMMA (pow2(9) = 512)
  
  % Obsolete chunk pow2_10
  % pow2_10: LEMMA (pow2(10) = 1024)
  
  % Obsolete chunk pow2_11
  % pow2_11: LEMMA (pow2(11) = 2048)
  
  % Obsolete chunk pow2_12
  % pow2_12: LEMMA (pow2(12) = 4096)
  
  % Obsolete chunk pow2_13
  % pow2_13: LEMMA (pow2(13) = 8192)
  
  % Obsolete chunk pow2_14
  % pow2_14: LEMMA (pow2(14) = 16384)
  
  % Obsolete chunk pow2_15
  % pow2_15: LEMMA (pow2(15) = 32768)
  
  % Obsolete chunk pow2_16
  % pow2_16: LEMMA (pow2(16) = 65536)
  
  % Obsolete chunk pow2_17
  % pow2_17: LEMMA (pow2(17) = 131072)
  
  % Obsolete chunk pow2_18
  % pow2_18: LEMMA (pow2(18) = 262144)
  
  % Obsolete chunk pow2_19
  % pow2_19: LEMMA (pow2(19) = 524288)
  
  % Obsolete chunk pow2_20
  % pow2_20: LEMMA (pow2(20) = 1048576)
  
  % Obsolete chunk pow2_21
  % pow2_21: LEMMA (pow2(21) = 2097152)
  
  % Obsolete chunk pow2_22
  % pow2_22: LEMMA (pow2(22) = 4194304)
  
  % Obsolete chunk pow2_23
  % pow2_23: LEMMA (pow2(23) = 8388608)
  
  % Obsolete chunk pow2_24
  % pow2_24: LEMMA (pow2(24) = 16777216)
  
  % Obsolete chunk pow2_25
  % pow2_25: LEMMA (pow2(25) = 33554432)
  
  % Obsolete chunk pow2_26
  % pow2_26: LEMMA (pow2(26) = 67108864)
  
  % Obsolete chunk pow2_27
  % pow2_27: LEMMA (pow2(27) = 134217728)
  
  % Obsolete chunk pow2_28
  % pow2_28: LEMMA (pow2(28) = 268435456)
  
  % Obsolete chunk pow2_29
  % pow2_29: LEMMA (pow2(29) = 536870912)
  
  % Obsolete chunk pow2_30
  % pow2_30: LEMMA (pow2(30) = 1073741824)
  
  % Obsolete chunk pow2_31
  % pow2_31: LEMMA (pow2(31) = 2147483648)
  
  % Obsolete chunk pow2_32
  % pow2_32: LEMMA (pow2(32) = 4294967296)
  
  % Obsolete chunk pow2_33
  % pow2_33: LEMMA (pow2(33) = 8589934592)
  
  % Obsolete chunk pow2_34
  % pow2_34: LEMMA (pow2(34) = 17179869184)
  
  % Obsolete chunk pow2_35
  % pow2_35: LEMMA (pow2(35) = 34359738368)
  
  % Obsolete chunk pow2_36
  % pow2_36: LEMMA (pow2(36) = 68719476736)
  
  % Obsolete chunk pow2_37
  % pow2_37: LEMMA (pow2(37) = 137438953472)
  
  % Obsolete chunk pow2_38
  % pow2_38: LEMMA (pow2(38) = 274877906944)
  
  % Obsolete chunk pow2_39
  % pow2_39: LEMMA (pow2(39) = 549755813888)
  
  % Obsolete chunk pow2_40
  % pow2_40: LEMMA (pow2(40) = 1099511627776)
  
  % Obsolete chunk pow2_41
  % pow2_41: LEMMA (pow2(41) = 2199023255552)
  
  % Obsolete chunk pow2_42
  % pow2_42: LEMMA (pow2(42) = 4398046511104)
  
  % Obsolete chunk pow2_43
  % pow2_43: LEMMA (pow2(43) = 8796093022208)
  
  % Obsolete chunk pow2_44
  % pow2_44: LEMMA (pow2(44) = 17592186044416)
  
  % Obsolete chunk pow2_45
  % pow2_45: LEMMA (pow2(45) = 35184372088832)
  
  % Obsolete chunk pow2_46
  % pow2_46: LEMMA (pow2(46) = 70368744177664)
  
  % Obsolete chunk pow2_47
  % pow2_47: LEMMA (pow2(47) = 140737488355328)
  
  % Obsolete chunk pow2_48
  % pow2_48: LEMMA (pow2(48) = 281474976710656)
  
  % Obsolete chunk pow2_49
  % pow2_49: LEMMA (pow2(49) = 562949953421312)
  
  % Obsolete chunk pow2_50
  % pow2_50: LEMMA (pow2(50) = 1125899906842624)
  
  % Obsolete chunk pow2_51
  % pow2_51: LEMMA (pow2(51) = 2251799813685248)
  
  % Obsolete chunk pow2_52
  % pow2_52: LEMMA (pow2(52) = 4503599627370496)
  
  % Obsolete chunk pow2_53
  % pow2_53: LEMMA (pow2(53) = 9007199254740992)
  
  % Obsolete chunk pow2_54
  % pow2_54: LEMMA (pow2(54) = 18014398509481984)
  
  % Obsolete chunk pow2_55
  % pow2_55: LEMMA (pow2(55) = 36028797018963968)
  
  % Obsolete chunk pow2_56
  % pow2_56: LEMMA (pow2(56) = 72057594037927936)
  
  % Obsolete chunk pow2_57
  % pow2_57: LEMMA (pow2(57) = 144115188075855872)
  
  % Obsolete chunk pow2_58
  % pow2_58: LEMMA (pow2(58) = 288230376151711744)
  
  % Obsolete chunk pow2_59
  % pow2_59: LEMMA (pow2(59) = 576460752303423488)
  
  % Obsolete chunk pow2_60
  % pow2_60: LEMMA (pow2(60) = 1152921504606846976)
  
  % Obsolete chunk pow2_61
  % pow2_61: LEMMA (pow2(61) = 2305843009213693952)
  
  % Obsolete chunk pow2_62
  % pow2_62: LEMMA (pow2(62) = 4611686018427387904)
  
  % Obsolete chunk pow2_63
  % pow2_63: LEMMA (pow2(63) = 9223372036854775808)
  
  % Obsolete chunk pow2_64
  % pow2_64: LEMMA (pow2(64) = 18446744073709551616)
  
  % Obsolete chunk truncate
  % truncate(x:real): int
  
  % Obsolete chunk truncate_down_pos
  % truncate_down_pos: LEMMA FORALL (x:real): (x >= 0) =>
  %   (((truncate(x) :: real) <= x) AND (x <  ((truncate(x) + 1) :: real)))
  
  % Obsolete chunk truncate_up_neg
  % truncate_up_neg: LEMMA FORALL (x:real): (x <= 0) =>
  %   ((((truncate(x) - 1) :: real) <  x) AND (x <= (truncate(x) :: real)))
  
  % Obsolete chunk real_of_truncate
  % real_of_truncate: LEMMA FORALL (x:real):
  %   ((x - 1) <= (truncate(x) :: real)) AND ((truncate(x) :: real) <= (x + 1))
  
  % Obsolete chunk truncate_monotonic
  % truncate_monotonic: LEMMA FORALL (x:real, y:real): (x <= y) =>
  %   (truncate(x) <= truncate(y))
  
  % Obsolete chunk truncate_monotonic_int1
  % truncate_monotonic_int1: LEMMA FORALL (x:real, i:int):
  %   (x <= (i :: real)) => (truncate(x) <= i)
  
  % Obsolete chunk truncate_monotonic_int2
  % truncate_monotonic_int2: LEMMA FORALL (x:real, i:int):
  %   ((i :: real) <= x) => (i <= truncate(x))
  
  % Obsolete chunk floor
  % floor(x:real): int
  
  % Obsolete chunk ceil
  % ceil(x:real): int
  
  % Obsolete chunk floor_int
  % floor_int: LEMMA FORALL (i:int): (floor((i :: real)) = i)
  
  % Obsolete chunk ceil_int
  % ceil_int: LEMMA FORALL (i:int): (ceil((i :: real)) = i)
  
  % Obsolete chunk floor_down
  % floor_down: LEMMA FORALL (x:real): ((floor(x) :: real) <= x) AND
  %   (x <  ((floor(x) + 1) :: real))
  
  % Obsolete chunk ceil_up
  % ceil_up: LEMMA FORALL (x:real): (((ceil(x) - 1) :: real) <  x) AND
  %   (x <= (ceil(x) :: real))
  
  % Obsolete chunk floor_monotonic
  % floor_monotonic: LEMMA FORALL (x:real, y:real): (x <= y) =>
  %   (floor(x) <= floor(y))
  
  % Obsolete chunk ceil_monotonic
  % ceil_monotonic: LEMMA FORALL (x:real, y:real): (x <= y) =>
  %   (ceil(x) <= ceil(y))
  
  % Obsolete chunk truncate_int1
  % truncate_int1: LEMMA FORALL (m:mode, i:t): is_int(i) =>
  %   infix_dteq(roundtointegral(m, i), i)
  
  % Obsolete chunk t1
  % t1: TYPE+
  
  % Obsolete chunk tqtreal1
  % tqtreal1(x:t1): real
  
  % Obsolete chunk tqtisfinite1
  % tqtisfinite1(x:t1): bool
  
  % Obsolete chunk tqtaxiom1
  % tqtaxiom1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (((-(9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)) <= tqtreal1(x)) AND
  %   (tqtreal1(x) <= (9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)))
  
  % Obsolete chunk tqteb1
  % tqteb1: int = 11
  
  % Obsolete chunk tqtsb1
  % tqtsb1: int = 53
  
  % Obsolete chunk pow2sb1
  % pow2sb1: int = 9007199254740992
  
  % Obsolete chunk max_real1
  % max_real1: real =
  %   (9007199254740991 * 19958403095347198116563727130368385660674512604354575415025472424372118918689640657849579654926357010893424468441924952439724379883935936607391717982848314203200056729510856765175377214443629871826533567445439239933308104551208703888888552684480441575071209068757560416423584952303440099278848)
  
  % Obsolete chunk zerof1
  % zerof1: t1
  
  % Obsolete chunk add2
  % add2(x:mode, x1:t1, x2:t1): t1
  
  % Obsolete chunk sub1
  % sub1(x:mode, x1:t1, x2:t1): t1
  
  % Obsolete chunk mul1
  % mul1(x:mode, x1:t1, x2:t1): t1
  
  % Obsolete chunk div1
  % div1(x:mode, x1:t1, x2:t1): t1
  
  % Obsolete chunk abs2
  % abs2(x:t1): t1
  
  % Obsolete chunk neg1
  % neg1(x:t1): t1
  
  % Obsolete chunk fma1
  % fma1(x:mode, x1:t1, x2:t1, x3:t1): t1
  
  % Obsolete chunk sqrt1
  % sqrt1(x:mode, x1:t1): t1
  
  % Obsolete chunk prefix_dtmn1
  % prefix_dtmn1(x:t1): t1 = neg1(x)
  
  % Obsolete chunk infix_dtpl1
  % infix_dtpl1(x:t1, y:t1): t1 = add2(rne, x, y)
  
  % Obsolete chunk infix_dtmn1
  % infix_dtmn1(x:t1, y:t1): t1 = sub1(rne, x, y)
  
  % Obsolete chunk infix_dtas1
  % infix_dtas1(x:t1, y:t1): t1 = mul1(rne, x, y)
  
  % Obsolete chunk infix_dtsl1
  % infix_dtsl1(x:t1, y:t1): t1 = div1(rne, x, y)
  
  % Obsolete chunk roundtointegral1
  % roundtointegral1(x:mode, x1:t1): t1
  
  % Obsolete chunk min2
  % min2(x:t1, x1:t1): t1
  
  % Obsolete chunk max2
  % max2(x:t1, x1:t1): t1
  
  % Obsolete chunk le1
  % le1(x:t1, x1:t1): bool
  
  % Obsolete chunk lt1
  % lt1(x:t1, x1:t1): bool
  
  % Obsolete chunk ge1
  % ge1(x:t1, y:t1): bool = le1(y, x)
  
  % Obsolete chunk gt1
  % gt1(x:t1, y:t1): bool = lt1(y, x)
  
  % Obsolete chunk eq2
  % eq2(x:t1, x1:t1): bool
  
  % Obsolete chunk infix_dtlseq1
  % infix_dtlseq1(x:t1, y:t1): bool = le1(x, y)
  
  % Obsolete chunk infix_dtls1
  % infix_dtls1(x:t1, y:t1): bool = lt1(x, y)
  
  % Obsolete chunk infix_dtgteq1
  % infix_dtgteq1(x:t1, y:t1): bool = ge1(x, y)
  
  % Obsolete chunk infix_dtgt1
  % infix_dtgt1(x:t1, y:t1): bool = gt1(x, y)
  
  % Obsolete chunk infix_dteq1
  % infix_dteq1(x:t1, y:t1): bool = eq2(x, y)
  
  % Obsolete chunk is_normal1
  % is_normal1(x:t1): bool
  
  % Obsolete chunk is_subnormal1
  % is_subnormal1(x:t1): bool
  
  % Obsolete chunk is_zero1
  % is_zero1(x:t1): bool
  
  % Obsolete chunk is_infinite1
  % is_infinite1(x:t1): bool
  
  % Obsolete chunk is_nan1
  % is_nan1(x:t1): bool
  
  % Obsolete chunk is_positive1
  % is_positive1(x:t1): bool
  
  % Obsolete chunk is_negative1
  % is_negative1(x:t1): bool
  
  % Obsolete chunk is_plus_infinity1
  % is_plus_infinity1(x:t1): bool = is_infinite1(x) AND is_positive1(x)
  
  % Obsolete chunk is_minus_infinity1
  % is_minus_infinity1(x:t1): bool = is_infinite1(x) AND is_negative1(x)
  
  % Obsolete chunk is_plus_zero1
  % is_plus_zero1(x:t1): bool = is_zero1(x) AND is_positive1(x)
  
  % Obsolete chunk is_minus_zero1
  % is_minus_zero1(x:t1): bool = is_zero1(x) AND is_negative1(x)
  
  % Obsolete chunk is_not_nan2
  % is_not_nan2(x:t1): bool = tqtisfinite1(x) OR is_infinite1(x)
  
  % Obsolete chunk is_not_nan3
  % is_not_nan3: LEMMA FORALL (x:t1): is_not_nan2(x) <=> NOT is_nan1(x)
  
  % Obsolete chunk is_not_finite1
  % is_not_finite1: LEMMA FORALL (x:t1): (NOT tqtisfinite1(x)) <=>
  %   (is_infinite1(x) OR is_nan1(x))
  
  % Obsolete chunk zerof_is_positive1
  % zerof_is_positive1: LEMMA is_positive1(zerof1)
  
  % Obsolete chunk zerof_is_zero1
  % zerof_is_zero1: LEMMA is_zero1(zerof1)
  
  % Obsolete chunk zero_to_real1
  % zero_to_real1: LEMMA FORALL (x:t1): is_zero1(x) <=> (tqtisfinite1(x) AND
  %   (tqtreal1(x) = 0))
  
  % Obsolete chunk of_int1
  % of_int1(x:mode, x1:int): t1
  
  % Obsolete chunk to_int1
  % to_int1(x:mode, x1:t1): int
  
  % Obsolete chunk zero_of_int1
  % zero_of_int1: LEMMA FORALL (m:mode): (zerof1 = of_int1(m, 0))
  
  % Obsolete chunk round1
  % round1(x:mode, x1:real): real
  
  % Obsolete chunk max_int1
  % max_int1: int
  
  % Obsolete chunk emax1
  % emax1: int = pow2((tqteb1 - 1))
  
  % Obsolete chunk max_real_int1
  % max_real_int1: LEMMA (max_real1 = (max_int1 :: real))
  
  % Obsolete chunk in_range1
  % in_range1(x:real): bool = ((-max_real1) <= x) AND (x <= max_real1)
  
  % Obsolete chunk in_int_range1
  % in_int_range1(i:int): bool = ((-max_int1) <= i) AND (i <= max_int1)
  
  % Obsolete chunk is_finite1
  % is_finite1: LEMMA FORALL (x:t1): tqtisfinite1(x) => in_range1(tqtreal1(x))
  
  % Obsolete chunk no_overflow1
  % no_overflow1(m:mode, x:real): bool = in_range1(round1(m, x))
  
  % Obsolete chunk bounded_real_no_overflow1
  % bounded_real_no_overflow1: LEMMA FORALL (m:mode, x:real): in_range1(x) =>
  %   no_overflow1(m, x)
  
  % Obsolete chunk round_monotonic1
  % round_monotonic1: LEMMA FORALL (m:mode, x:real, y:real): (x <= y) =>
  %   (round1(m, x) <= round1(m, y))
  
  % Obsolete chunk round_idempotent1
  % round_idempotent1: LEMMA FORALL (m1:mode, m2:mode, x:real): (round1(m1,
  %   round1(m2, x)) = round1(m2, x))
  
  % Obsolete chunk round_to_real1
  % round_to_real1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) => (round1(m,
  %   tqtreal1(x)) = tqtreal1(x))
  
  % Obsolete chunk round_down_le1
  % round_down_le1: LEMMA FORALL (x:real): (round1(rtn, x) <= x)
  
  % Obsolete chunk round_up_ge1
  % round_up_ge1: LEMMA FORALL (x:real): (round1(rtp, x) >= x)
  
  % Obsolete chunk round_down_neg1
  % round_down_neg1: LEMMA FORALL (x:real): (round1(rtn, (-x)) = (-round1(rtp,
  %   x)))
  
  % Obsolete chunk round_up_neg1
  % round_up_neg1: LEMMA FORALL (x:real): (round1(rtp, (-x)) = (-round1(rtn,
  %   x)))
  
  % Obsolete chunk in_safe_int_range1
  % in_safe_int_range1(i:int): bool = ((-pow2sb1) <= i) AND (i <= pow2sb1)
  
  % Obsolete chunk exact_rounding_for_integers1
  % exact_rounding_for_integers1: LEMMA FORALL (m:mode, i:int):
  %   in_safe_int_range1(i) => (round1(m, (i :: real)) = (i :: real))
  
  % Obsolete chunk same_sign1
  % same_sign1(x:t1, y:t1): bool = (is_positive1(x) AND is_positive1(y)) OR
  %   (is_negative1(x) AND is_negative1(y))
  
  % Obsolete chunk diff_sign1
  % diff_sign1(x:t1, y:t1): bool = (is_positive1(x) AND is_negative1(y)) OR
  %   (is_negative1(x) AND is_positive1(y))
  
  % Obsolete chunk feq_eq1
  % feq_eq1: LEMMA FORALL (x:t1, y:t1): tqtisfinite1(x) => (tqtisfinite1(y) =>
  %   ((NOT is_zero1(x)) => (infix_dteq1(x, y) => (x = y))))
  
  % Obsolete chunk eq_feq1
  % eq_feq1: LEMMA FORALL (x:t1, y:t1): tqtisfinite1(x) => (tqtisfinite1(y) =>
  %   ((x = y) => infix_dteq1(x, y)))
  
  % Obsolete chunk eq_refl1
  % eq_refl1: LEMMA FORALL (x:t1): tqtisfinite1(x) => infix_dteq1(x, x)
  
  % Obsolete chunk eq_sym1
  % eq_sym1: LEMMA FORALL (x:t1, y:t1): infix_dteq1(x, y) => infix_dteq1(y, x)
  
  % Obsolete chunk eq_trans1
  % eq_trans1: LEMMA FORALL (x:t1, y:t1, z:t1): infix_dteq1(x, y) =>
  %   (infix_dteq1(y, z) => infix_dteq1(x, z))
  
  % Obsolete chunk eq_zero1
  % eq_zero1: LEMMA infix_dteq1(zerof1, prefix_dtmn1(zerof1))
  
  % Obsolete chunk eq_to_real_finite1
  % eq_to_real_finite1: LEMMA FORALL (x:t1, y:t1): (tqtisfinite1(x) AND
  %   tqtisfinite1(y)) => (infix_dteq1(x, y) <=> (tqtreal1(x) = tqtreal1(y)))
  
  % Obsolete chunk eq_special1
  % eq_special1: LEMMA FORALL (x:t1, y:t1): infix_dteq1(x, y) =>
  %   (is_not_nan2(x) AND (is_not_nan2(y) AND ((tqtisfinite1(x) AND
  %   tqtisfinite1(y)) OR (is_infinite1(x) AND (is_infinite1(y) AND
  %   same_sign1(x, y))))))
  
  % Obsolete chunk lt_finite1
  % lt_finite1: LEMMA FORALL (x:t1, y:t1): (tqtisfinite1(x) AND
  %   tqtisfinite1(y)) => (lt1(x, y) <=> (tqtreal1(x) <  tqtreal1(y)))
  
  % Obsolete chunk le_finite1
  % le_finite1: LEMMA FORALL (x:t1, y:t1): (tqtisfinite1(x) AND
  %   tqtisfinite1(y)) => (le1(x, y) <=> (tqtreal1(x) <= tqtreal1(y)))
  
  % Obsolete chunk le_lt_trans1
  % le_lt_trans1: LEMMA FORALL (x:t1, y:t1, z:t1): (infix_dtlseq1(x, y) AND
  %   infix_dtls1(y, z)) => infix_dtls1(x, z)
  
  % Obsolete chunk lt_le_trans1
  % lt_le_trans1: LEMMA FORALL (x:t1, y:t1, z:t1): (infix_dtls1(x, y) AND
  %   infix_dtlseq1(y, z)) => infix_dtls1(x, z)
  
  % Obsolete chunk le_ge_asym1
  % le_ge_asym1: LEMMA FORALL (x:t1, y:t1): (infix_dtlseq1(x, y) AND
  %   infix_dtgteq1(x, y)) => infix_dteq1(x, y)
  
  % Obsolete chunk not_lt_ge1
  % not_lt_ge1: LEMMA FORALL (x:t1, y:t1): ((NOT infix_dtls1(x, y)) AND
  %   (is_not_nan2(x) AND is_not_nan2(y))) => infix_dtgteq1(x, y)
  
  % Obsolete chunk not_gt_le1
  % not_gt_le1: LEMMA FORALL (x:t1, y:t1): ((NOT infix_dtgt1(x, y)) AND
  %   (is_not_nan2(x) AND is_not_nan2(y))) => infix_dtlseq1(x, y)
  
  % Obsolete chunk le_special1
  % le_special1: LEMMA FORALL (x:t1, y:t1): le1(x, y) => ((tqtisfinite1(x) AND
  %   tqtisfinite1(y)) OR ((is_minus_infinity1(x) AND is_not_nan2(y)) OR
  %   (is_not_nan2(x) AND is_plus_infinity1(y))))
  
  % Obsolete chunk lt_special1
  % lt_special1: LEMMA FORALL (x:t1, y:t1): lt1(x, y) => ((tqtisfinite1(x) AND
  %   tqtisfinite1(y)) OR ((is_minus_infinity1(x) AND (is_not_nan2(y) AND
  %   NOT is_minus_infinity1(y))) OR (is_not_nan2(x) AND
  %   ((NOT is_plus_infinity1(x)) AND is_plus_infinity1(y)))))
  
  % Obsolete chunk lt_lt_finite1
  % lt_lt_finite1: LEMMA FORALL (x:t1, y:t1, z:t1): lt1(x, y) => (lt1(y, z) =>
  %   tqtisfinite1(y))
  
  % Obsolete chunk positive_to_real1
  % positive_to_real1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (is_positive1(x) => (tqtreal1(x) >= 0))
  
  % Obsolete chunk to_real_positive1
  % to_real_positive1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   ((tqtreal1(x) >  0) => is_positive1(x))
  
  % Obsolete chunk negative_to_real1
  % negative_to_real1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (is_negative1(x) => (tqtreal1(x) <= 0))
  
  % Obsolete chunk to_real_negative1
  % to_real_negative1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   ((tqtreal1(x) <  0) => is_negative1(x))
  
  % Obsolete chunk negative_xor_positive1
  % negative_xor_positive1: LEMMA FORALL (x:t1): NOT (is_positive1(x) AND
  %   is_negative1(x))
  
  % Obsolete chunk negative_or_positive1
  % negative_or_positive1: LEMMA FORALL (x:t1): is_not_nan2(x) =>
  %   (is_positive1(x) OR is_negative1(x))
  
  % Obsolete chunk diff_sign_trans1
  % diff_sign_trans1: LEMMA FORALL (x:t1, y:t1, z:t1): (diff_sign1(x, y) AND
  %   diff_sign1(y, z)) => same_sign1(x, z)
  
  % Obsolete chunk diff_sign_product1
  % diff_sign_product1: LEMMA FORALL (x:t1, y:t1): (tqtisfinite1(x) AND
  %   (tqtisfinite1(y) AND ((tqtreal1(x) * tqtreal1(y)) <  0))) =>
  %   diff_sign1(x, y)
  
  % Obsolete chunk same_sign_product1
  % same_sign_product1: LEMMA FORALL (x:t1, y:t1): (tqtisfinite1(x) AND
  %   (tqtisfinite1(y) AND same_sign1(x, y))) =>
  %   ((tqtreal1(x) * tqtreal1(y)) >= 0)
  
  % Obsolete chunk product_sign1
  % product_sign1(z:t1, x:t1, y:t1): bool = (same_sign1(x, y) =>
  %   is_positive1(z)) AND (diff_sign1(x, y) => is_negative1(z))
  
  % Obsolete chunk overflow_value1
  % overflow_value1(m:mode, x:t1): bool =
  %   CASES m OF
  %    rtn: IF is_positive1(x) THEN tqtisfinite1(x) AND
  %       (tqtreal1(x) = max_real1) ELSE is_infinite1(x) ENDIF,
  %    rtp: IF is_positive1(x) THEN is_infinite1(x) ELSE (tqtisfinite1(x) AND
  %       (tqtreal1(x) = (-max_real1))) ENDIF,
  %    rtz: IF is_positive1(x) THEN tqtisfinite1(x) AND
  %       (tqtreal1(x) = max_real1) ELSE (tqtisfinite1(x) AND
  %       (tqtreal1(x) = (-max_real1))) ENDIF,
  %    rna: is_infinite1(x),
  %    rne: is_infinite1(x)
  %   ENDCASES
  
  % Obsolete chunk sign_zero_result1
  % sign_zero_result1(m:mode, x:t1): bool = is_zero1(x) =>
  %   CASES m OF
  %    rtn: is_negative1(x)
  %   ELSE is_positive1(x)
  %   ENDCASES
  
  % Obsolete chunk add_finite1
  % add_finite1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => (no_overflow1(m, (tqtreal1(x) + tqtreal1(y))) =>
  %   (tqtisfinite1(add2(m, x, y)) AND (tqtreal1(add2(m, x, y)) = round1(m,
  %   (tqtreal1(x) + tqtreal1(y)))))))
  
  % Obsolete chunk add_finite_rev1
  % add_finite_rev1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(add2(m, x,
  %   y)) => (tqtisfinite1(x) AND tqtisfinite1(y))
  
  % Obsolete chunk add_finite_rev_n1
  % add_finite_rev_n1: LEMMA FORALL (m:mode, x:t1, y:t1): to_nearest(m) =>
  %   (tqtisfinite1(add2(m, x, y)) => (no_overflow1(m,
  %   (tqtreal1(x) + tqtreal1(y))) AND (tqtreal1(add2(m, x, y)) = round1(m,
  %   (tqtreal1(x) + tqtreal1(y))))))
  
  % Obsolete chunk sub_finite1
  % sub_finite1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => (no_overflow1(m, (tqtreal1(x) - tqtreal1(y))) =>
  %   (tqtisfinite1(sub1(m, x, y)) AND (tqtreal1(sub1(m, x, y)) = round1(m,
  %   (tqtreal1(x) - tqtreal1(y)))))))
  
  % Obsolete chunk sub_finite_rev1
  % sub_finite_rev1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(sub1(m, x,
  %   y)) => (tqtisfinite1(x) AND tqtisfinite1(y))
  
  % Obsolete chunk sub_finite_rev_n1
  % sub_finite_rev_n1: LEMMA FORALL (m:mode, x:t1, y:t1): to_nearest(m) =>
  %   (tqtisfinite1(sub1(m, x, y)) => (no_overflow1(m,
  %   (tqtreal1(x) - tqtreal1(y))) AND (tqtreal1(sub1(m, x, y)) = round1(m,
  %   (tqtreal1(x) - tqtreal1(y))))))
  
  % Obsolete chunk mul_finite1
  % mul_finite1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => (no_overflow1(m, (tqtreal1(x) * tqtreal1(y))) =>
  %   (tqtisfinite1(mul1(m, x, y)) AND (tqtreal1(mul1(m, x, y)) = round1(m,
  %   (tqtreal1(x) * tqtreal1(y)))))))
  
  % Obsolete chunk mul_finite_rev1
  % mul_finite_rev1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(mul1(m, x,
  %   y)) => (tqtisfinite1(x) AND tqtisfinite1(y))
  
  % Obsolete chunk mul_finite_rev_n1
  % mul_finite_rev_n1: LEMMA FORALL (m:mode, x:t1, y:t1): to_nearest(m) =>
  %   (tqtisfinite1(mul1(m, x, y)) => (no_overflow1(m,
  %   (tqtreal1(x) * tqtreal1(y))) AND (tqtreal1(mul1(m, x, y)) = round1(m,
  %   (tqtreal1(x) * tqtreal1(y))))))
  
  % Obsolete chunk div_finite1
  % div_finite1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => ((NOT is_zero1(y)) => (no_overflow1(m,
  %   real@Real.infix_sl(tqtreal1(x), tqtreal1(y))) => (tqtisfinite1(div1(m, x,
  %   y)) AND (tqtreal1(div1(m, x, y)) = round1(m,
  %   real@Real.infix_sl(tqtreal1(x), tqtreal1(y))))))))
  
  % Obsolete chunk div_finite_rev1
  % div_finite_rev1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(div1(m, x,
  %   y)) => ((tqtisfinite1(x) AND (tqtisfinite1(y) AND NOT is_zero1(y))) OR
  %   (tqtisfinite1(x) AND (is_infinite1(y) AND (tqtreal1(div1(m, x,
  %   y)) = 0))))
  
  % Obsolete chunk div_finite_rev_n1
  % div_finite_rev_n1: LEMMA FORALL (m:mode, x:t1, y:t1): to_nearest(m) =>
  %   (tqtisfinite1(div1(m, x, y)) => (tqtisfinite1(y) => (no_overflow1(m,
  %   real@Real.infix_sl(tqtreal1(x), tqtreal1(y))) AND (tqtreal1(div1(m, x,
  %   y)) = round1(m, real@Real.infix_sl(tqtreal1(x), tqtreal1(y)))))))
  
  % Obsolete chunk neg_finite1
  % neg_finite1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(neg1(x)) AND (tqtreal1(neg1(x)) = (-tqtreal1(x))))
  
  % Obsolete chunk neg_finite_rev1
  % neg_finite_rev1: LEMMA FORALL (x:t1): tqtisfinite1(neg1(x)) =>
  %   (tqtisfinite1(x) AND (tqtreal1(neg1(x)) = (-tqtreal1(x))))
  
  % Obsolete chunk abs_finite1
  % abs_finite1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(abs2(x)) AND ((tqtreal1(abs2(x)) = abs(tqtreal1(x))) AND
  %   is_positive1(abs2(x))))
  
  % Obsolete chunk abs_finite_rev1
  % abs_finite_rev1: LEMMA FORALL (x:t1): tqtisfinite1(abs2(x)) =>
  %   (tqtisfinite1(x) AND (tqtreal1(abs2(x)) = abs(tqtreal1(x))))
  
  % Obsolete chunk abs_universal1
  % abs_universal1: LEMMA FORALL (x:t1): NOT is_negative1(abs2(x))
  
  % Obsolete chunk fma_finite1
  % fma_finite1: LEMMA FORALL (m:mode, x:t1, y:t1, z:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => (tqtisfinite1(z) => (no_overflow1(m,
  %   ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))) => (tqtisfinite1(fma1(m, x,
  %   y, z)) AND (tqtreal1(fma1(m, x, y, z)) = round1(m,
  %   ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))))))))
  
  % Obsolete chunk fma_finite_rev1
  % fma_finite_rev1: LEMMA FORALL (m:mode, x:t1, y:t1, z:t1):
  %   tqtisfinite1(fma1(m, x, y, z)) => (tqtisfinite1(x) AND
  %   (tqtisfinite1(y) AND tqtisfinite1(z)))
  
  % Obsolete chunk fma_finite_rev_n1
  % fma_finite_rev_n1: LEMMA FORALL (m:mode, x:t1, y:t1, z:t1):
  %   to_nearest(m) => (tqtisfinite1(fma1(m, x, y, z)) => (no_overflow1(m,
  %   ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))) AND (tqtreal1(fma1(m, x, y,
  %   z)) = round1(m, ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))))))
  
  % Obsolete chunk sqrt_finite1
  % sqrt_finite1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) =>
  %   ((tqtreal1(x) >= 0) => (tqtisfinite1(sqrt1(m, x)) AND (tqtreal1(sqrt1(m,
  %   x)) = round1(m, real@Square.sqrt(tqtreal1(x))))))
  
  % Obsolete chunk sqrt_finite_rev1
  % sqrt_finite_rev1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(sqrt1(m, x)) =>
  %   (tqtisfinite1(x) AND ((tqtreal1(x) >= 0) AND (tqtreal1(sqrt1(m,
  %   x)) = round1(m, real@Square.sqrt(tqtreal1(x))))))
  
  % Obsolete chunk same_sign_real1
  % same_sign_real1(x:t1, r:real): bool = (is_positive1(x) AND (r >  0)) OR
  %   (is_negative1(x) AND (r <  0))
  
  % Obsolete chunk add_special1
  % add_special1: LEMMA FORALL (m:mode, x:t1, y:t1): LET r = add2(m, x, y) IN
  %   (((is_nan1(x) OR is_nan1(y)) => is_nan1(r)) AND (((tqtisfinite1(x) AND
  %   is_infinite1(y)) => (is_infinite1(r) AND same_sign1(r, y))) AND
  %   (((is_infinite1(x) AND tqtisfinite1(y)) => (is_infinite1(r) AND
  %   same_sign1(r, x))) AND (((is_infinite1(x) AND (is_infinite1(y) AND
  %   same_sign1(x, y))) => (is_infinite1(r) AND same_sign1(r, x))) AND
  %   (((is_infinite1(x) AND (is_infinite1(y) AND diff_sign1(x, y))) =>
  %   is_nan1(r)) AND (((tqtisfinite1(x) AND (tqtisfinite1(y) AND
  %   NOT no_overflow1(m, (tqtreal1(x) + tqtreal1(y))))) => (same_sign_real1(r,
  %   (tqtreal1(x) + tqtreal1(y))) AND overflow_value1(m, r))) AND
  %   ((tqtisfinite1(x) AND tqtisfinite1(y)) => IF same_sign1(x, y)
  %   THEN same_sign1(r, x) ELSE sign_zero_result1(m, r) ENDIF)))))))
  
  % Obsolete chunk sub_special1
  % sub_special1: LEMMA FORALL (m:mode, x:t1, y:t1): LET r = sub1(m, x, y) IN
  %   (((is_nan1(x) OR is_nan1(y)) => is_nan1(r)) AND (((tqtisfinite1(x) AND
  %   is_infinite1(y)) => (is_infinite1(r) AND diff_sign1(r, y))) AND
  %   (((is_infinite1(x) AND tqtisfinite1(y)) => (is_infinite1(r) AND
  %   same_sign1(r, x))) AND (((is_infinite1(x) AND (is_infinite1(y) AND
  %   same_sign1(x, y))) => is_nan1(r)) AND (((is_infinite1(x) AND
  %   (is_infinite1(y) AND diff_sign1(x, y))) => (is_infinite1(r) AND
  %   same_sign1(r, x))) AND (((tqtisfinite1(x) AND (tqtisfinite1(y) AND
  %   NOT no_overflow1(m, (tqtreal1(x) - tqtreal1(y))))) => (same_sign_real1(r,
  %   (tqtreal1(x) - tqtreal1(y))) AND overflow_value1(m, r))) AND
  %   ((tqtisfinite1(x) AND tqtisfinite1(y)) => IF diff_sign1(x, y)
  %   THEN same_sign1(r, x) ELSE sign_zero_result1(m, r) ENDIF)))))))
  
  % Obsolete chunk mul_special1
  % mul_special1: LEMMA FORALL (m:mode, x:t1, y:t1): LET r = mul1(m, x, y) IN
  %   (((is_nan1(x) OR is_nan1(y)) => is_nan1(r)) AND (((is_zero1(x) AND
  %   is_infinite1(y)) => is_nan1(r)) AND (((tqtisfinite1(x) AND
  %   (is_infinite1(y) AND NOT is_zero1(x))) => is_infinite1(r)) AND
  %   (((is_infinite1(x) AND is_zero1(y)) => is_nan1(r)) AND
  %   (((is_infinite1(x) AND (tqtisfinite1(y) AND NOT is_zero1(y))) =>
  %   is_infinite1(r)) AND (((is_infinite1(x) AND is_infinite1(y)) =>
  %   is_infinite1(r)) AND (((tqtisfinite1(x) AND (tqtisfinite1(y) AND
  %   NOT no_overflow1(m, (tqtreal1(x) * tqtreal1(y))))) => overflow_value1(m,
  %   r)) AND ((NOT is_nan1(r)) => product_sign1(r, x, y)))))))))
  
  % Obsolete chunk div_special1
  % div_special1: LEMMA FORALL (m:mode, x:t1, y:t1): LET r = div1(m, x, y) IN
  %   (((is_nan1(x) OR is_nan1(y)) => is_nan1(r)) AND (((tqtisfinite1(x) AND
  %   is_infinite1(y)) => is_zero1(r)) AND (((is_infinite1(x) AND
  %   tqtisfinite1(y)) => is_infinite1(r)) AND (((is_infinite1(x) AND
  %   is_infinite1(y)) => is_nan1(r)) AND (((tqtisfinite1(x) AND
  %   (tqtisfinite1(y) AND ((NOT is_zero1(y)) AND NOT no_overflow1(m,
  %   real@Real.infix_sl(tqtreal1(x), tqtreal1(y)))))) => overflow_value1(m,
  %   r)) AND (((tqtisfinite1(x) AND (is_zero1(y) AND NOT is_zero1(x))) =>
  %   is_infinite1(r)) AND (((is_zero1(x) AND is_zero1(y)) => is_nan1(r)) AND
  %   ((NOT is_nan1(r)) => product_sign1(r, x, y)))))))))
  
  % Obsolete chunk neg_special1
  % neg_special1: LEMMA FORALL (x:t1): (is_nan1(x) => is_nan1(neg1(x))) AND
  %   ((is_infinite1(x) => is_infinite1(neg1(x))) AND ((NOT is_nan1(x)) =>
  %   diff_sign1(x, neg1(x))))
  
  % Obsolete chunk abs_special1
  % abs_special1: LEMMA FORALL (x:t1): (is_nan1(x) => is_nan1(abs2(x))) AND
  %   ((is_infinite1(x) => is_infinite1(abs2(x))) AND ((NOT is_nan1(x)) =>
  %   is_positive1(abs2(x))))
  
  % Obsolete chunk fma_special1
  % fma_special1: LEMMA FORALL (m:mode, x:t1, y:t1, z:t1): LET r = fma1(m, x,
  %   y, z) IN (((is_nan1(x) OR (is_nan1(y) OR is_nan1(z))) => is_nan1(r)) AND
  %   (((is_zero1(x) AND is_infinite1(y)) => is_nan1(r)) AND
  %   (((is_infinite1(x) AND is_zero1(y)) => is_nan1(r)) AND
  %   (((tqtisfinite1(x) AND ((NOT is_zero1(x)) AND (is_infinite1(y) AND
  %   tqtisfinite1(z)))) => (is_infinite1(r) AND product_sign1(r, x, y))) AND
  %   (((tqtisfinite1(x) AND ((NOT is_zero1(x)) AND (is_infinite1(y) AND
  %   is_infinite1(z)))) => IF product_sign1(z, x, y) THEN is_infinite1(r) AND
  %   same_sign1(r, z) ELSE is_nan1(r) ENDIF) AND (((is_infinite1(x) AND
  %   (tqtisfinite1(y) AND ((NOT is_zero1(y)) AND tqtisfinite1(z)))) =>
  %   (is_infinite1(r) AND product_sign1(r, x, y))) AND (((is_infinite1(x) AND
  %   (tqtisfinite1(y) AND ((NOT is_zero1(y)) AND is_infinite1(z)))) =>
  %   IF product_sign1(z, x, y) THEN is_infinite1(r) AND same_sign1(r, z)
  %   ELSE is_nan1(r) ENDIF) AND (((is_infinite1(x) AND (is_infinite1(y) AND
  %   tqtisfinite1(z))) => (is_infinite1(r) AND product_sign1(r, x, y))) AND
  %   (((tqtisfinite1(x) AND (tqtisfinite1(y) AND is_infinite1(z))) =>
  %   (is_infinite1(r) AND same_sign1(r, z))) AND (((is_infinite1(x) AND
  %   (is_infinite1(y) AND is_infinite1(z))) => IF product_sign1(z, x, y)
  %   THEN is_infinite1(r) AND same_sign1(r, z) ELSE is_nan1(r) ENDIF) AND
  %   (((tqtisfinite1(x) AND (tqtisfinite1(y) AND (tqtisfinite1(z) AND
  %   NOT no_overflow1(m, ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z)))))) =>
  %   (same_sign_real1(r, ((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z))) AND
  %   overflow_value1(m, r))) AND ((tqtisfinite1(x) AND (tqtisfinite1(y) AND
  %   tqtisfinite1(z))) => IF product_sign1(z, x, y) THEN same_sign1(r, z)
  %   ELSE ((((tqtreal1(x) * tqtreal1(y)) + tqtreal1(z)) = 0) => IF (m = rtn)
  %   THEN is_negative1(r) ELSE is_positive1(r) ENDIF) ENDIF))))))))))))
  
  % Obsolete chunk sqrt_special1
  % sqrt_special1: LEMMA FORALL (m:mode, x:t1): LET r = sqrt1(m, x) IN
  %   ((is_nan1(x) => is_nan1(r)) AND ((is_plus_infinity1(x) =>
  %   is_plus_infinity1(r)) AND ((is_minus_infinity1(x) => is_nan1(r)) AND
  %   (((tqtisfinite1(x) AND (tqtreal1(x) <  0)) => is_nan1(r)) AND
  %   ((is_zero1(x) => same_sign1(r, x)) AND ((tqtisfinite1(x) AND
  %   (tqtreal1(x) >  0)) => is_positive1(r)))))))
  
  % Obsolete chunk of_int_add_exact1
  % of_int_add_exact1: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range1(i) => (in_safe_int_range1(j) =>
  %   (in_safe_int_range1((i + j)) => eq2(of_int1(m, (i + j)), add2(n,
  %   of_int1(m, i), of_int1(m, j)))))
  
  % Obsolete chunk of_int_sub_exact1
  % of_int_sub_exact1: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range1(i) => (in_safe_int_range1(j) =>
  %   (in_safe_int_range1((i - j)) => eq2(of_int1(m, (i - j)), sub1(n,
  %   of_int1(m, i), of_int1(m, j)))))
  
  % Obsolete chunk of_int_mul_exact1
  % of_int_mul_exact1: LEMMA FORALL (m:mode, n:mode, i:int, j:int):
  %   in_safe_int_range1(i) => (in_safe_int_range1(j) =>
  %   (in_safe_int_range1((i * j)) => eq2(of_int1(m, (i * j)), mul1(n,
  %   of_int1(m, i), of_int1(m, j)))))
  
  % Obsolete chunk min_r1
  % min_r1: LEMMA FORALL (x:t1, y:t1): infix_dtlseq1(y, x) =>
  %   infix_dteq1(min2(x, y), y)
  
  % Obsolete chunk min_l1
  % min_l1: LEMMA FORALL (x:t1, y:t1): infix_dtlseq1(x, y) =>
  %   infix_dteq1(min2(x, y), x)
  
  % Obsolete chunk max_r1
  % max_r1: LEMMA FORALL (x:t1, y:t1): infix_dtlseq1(y, x) =>
  %   infix_dteq1(max2(x, y), x)
  
  % Obsolete chunk max_l1
  % max_l1: LEMMA FORALL (x:t1, y:t1): infix_dtlseq1(x, y) =>
  %   infix_dteq1(max2(x, y), y)
  
  % Obsolete chunk is_int1
  % is_int1(x:t1): bool
  
  % Obsolete chunk zerof_is_int1
  % zerof_is_int1: LEMMA is_int1(zerof1)
  
  % Obsolete chunk of_int_is_int1
  % of_int_is_int1: LEMMA FORALL (m:mode, x:int): in_int_range1(x) =>
  %   is_int1(of_int1(m, x))
  
  % Obsolete chunk big_float_is_int1
  % big_float_is_int1: LEMMA FORALL (m:mode, i:t1): tqtisfinite1(i) =>
  %   ((infix_dtlseq1(i, neg1(of_int1(m, pow2sb1))) OR infix_dtlseq1(of_int1(m,
  %   pow2sb1), i)) => is_int1(i))
  
  % Obsolete chunk roundtointegral_is_int1
  % roundtointegral_is_int1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) =>
  %   is_int1(roundtointegral1(m, x))
  
  % Obsolete chunk eq_is_int1
  % eq_is_int1: LEMMA FORALL (x:t1, y:t1): eq2(x, y) => (is_int1(x) =>
  %   is_int1(y))
  
  % Obsolete chunk add_int1
  % add_int1: LEMMA FORALL (x:t1, y:t1, m:mode): is_int1(x) => (is_int1(y) =>
  %   (tqtisfinite1(add2(m, x, y)) => is_int1(add2(m, x, y))))
  
  % Obsolete chunk sub_int1
  % sub_int1: LEMMA FORALL (x:t1, y:t1, m:mode): is_int1(x) => (is_int1(y) =>
  %   (tqtisfinite1(sub1(m, x, y)) => is_int1(sub1(m, x, y))))
  
  % Obsolete chunk mul_int1
  % mul_int1: LEMMA FORALL (x:t1, y:t1, m:mode): is_int1(x) => (is_int1(y) =>
  %   (tqtisfinite1(mul1(m, x, y)) => is_int1(mul1(m, x, y))))
  
  % Obsolete chunk fma_int1
  % fma_int1: LEMMA FORALL (x:t1, y:t1, z:t1, m:mode): is_int1(x) =>
  %   (is_int1(y) => (is_int1(z) => (tqtisfinite1(fma1(m, x, y, z)) =>
  %   is_int1(fma1(m, x, y, z)))))
  
  % Obsolete chunk neg_int1
  % neg_int1: LEMMA FORALL (x:t1): is_int1(x) => is_int1(neg1(x))
  
  % Obsolete chunk abs_int1
  % abs_int1: LEMMA FORALL (x:t1): is_int1(x) => is_int1(abs2(x))
  
  % Obsolete chunk is_int_of_int1
  % is_int_of_int1: LEMMA FORALL (x:t1, m:mode, mqt:mode): is_int1(x) => eq2(x,
  %   of_int1(mqt, to_int1(m, x)))
  
  % Obsolete chunk is_int_to_int1
  % is_int_to_int1: LEMMA FORALL (m:mode, x:t1): is_int1(x) =>
  %   in_int_range1(to_int1(m, x))
  
  % Obsolete chunk is_int_is_finite1
  % is_int_is_finite1: LEMMA FORALL (x:t1): is_int1(x) => tqtisfinite1(x)
  
  % Obsolete chunk int_to_real1
  % int_to_real1: LEMMA FORALL (m:mode, x:t1): is_int1(x) =>
  %   (tqtreal1(x) = (to_int1(m, x) :: real))
  
  % Obsolete chunk truncate_int2
  % truncate_int2: LEMMA FORALL (m:mode, i:t1): is_int1(i) =>
  %   infix_dteq1(roundtointegral1(m, i), i)
  
  % Obsolete chunk truncate_neg1
  % truncate_neg1: LEMMA FORALL (x:t1): tqtisfinite1(x) => (is_negative1(x) =>
  %   (roundtointegral1(rtz, x) = roundtointegral1(rtp, x)))
  
  % Obsolete chunk truncate_pos1
  % truncate_pos1: LEMMA FORALL (x:t1): tqtisfinite1(x) => (is_positive1(x) =>
  %   (roundtointegral1(rtz, x) = roundtointegral1(rtn, x)))
  
  % Obsolete chunk ceil_le1
  % ceil_le1: LEMMA FORALL (x:t1): tqtisfinite1(x) => infix_dtlseq1(x,
  %   roundtointegral1(rtp, x))
  
  % Obsolete chunk ceil_lest1
  % ceil_lest1: LEMMA FORALL (x:t1, y:t1): (infix_dtlseq1(x, y) AND
  %   is_int1(y)) => infix_dtlseq1(roundtointegral1(rtp, x), y)
  
  % Obsolete chunk ceil_to_real1
  % ceil_to_real1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (tqtreal1(roundtointegral1(rtp, x)) = (ceil(tqtreal1(x)) :: real))
  
  % Obsolete chunk ceil_to_int1
  % ceil_to_int1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) => (to_int1(m,
  %   roundtointegral1(rtp, x)) = ceil(tqtreal1(x)))
  
  % Obsolete chunk floor_le1
  % floor_le1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   infix_dtlseq1(roundtointegral1(rtn, x), x)
  
  % Obsolete chunk floor_lest1
  % floor_lest1: LEMMA FORALL (x:t1, y:t1): (infix_dtlseq1(y, x) AND
  %   is_int1(y)) => infix_dtlseq1(y, roundtointegral1(rtn, x))
  
  % Obsolete chunk floor_to_real1
  % floor_to_real1: LEMMA FORALL (x:t1): tqtisfinite1(x) =>
  %   (tqtreal1(roundtointegral1(rtn, x)) = (floor(tqtreal1(x)) :: real))
  
  % Obsolete chunk floor_to_int1
  % floor_to_int1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) => (to_int1(m,
  %   roundtointegral1(rtn, x)) = floor(tqtreal1(x)))
  
  % Obsolete chunk rna_down1
  % rna_down1: LEMMA FORALL (x:t1): infix_dtls1(infix_dtmn1(x,
  %   roundtointegral1(rtn, x)), infix_dtmn1(roundtointegral1(rtp, x), x)) =>
  %   (roundtointegral1(rna, x) = roundtointegral1(rtn, x))
  
  % Obsolete chunk rna_up1
  % rna_up1: LEMMA FORALL (x:t1): infix_dtgt1(infix_dtmn1(x,
  %   roundtointegral1(rtn, x)), infix_dtmn1(roundtointegral1(rtp, x), x)) =>
  %   (roundtointegral1(rna, x) = roundtointegral1(rtp, x))
  
  % Obsolete chunk rna_down_tie1
  % rna_down_tie1: LEMMA FORALL (x:t1): infix_dteq1(infix_dtmn1(x,
  %   roundtointegral1(rtn, x)), infix_dtmn1(roundtointegral1(rtp, x), x)) =>
  %   (is_negative1(x) => (roundtointegral1(rna, x) = roundtointegral1(rtn,
  %   x)))
  
  % Obsolete chunk rna_up_tie1
  % rna_up_tie1: LEMMA FORALL (x:t1):
  %   infix_dteq1(infix_dtmn1(roundtointegral1(rtp, x), x), infix_dtmn1(x,
  %   roundtointegral1(rtn, x))) => (is_positive1(x) => (roundtointegral1(rna,
  %   x) = roundtointegral1(rtp, x)))
  
  % Obsolete chunk to_int_roundtointegral1
  % to_int_roundtointegral1: LEMMA FORALL (m:mode, x:t1): (to_int1(m,
  %   x) = to_int1(m, roundtointegral1(m, x)))
  
  % Obsolete chunk to_int_monotonic1
  % to_int_monotonic1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (tqtisfinite1(y) => (le1(x, y) => (to_int1(m, x) <= to_int1(m, y))))
  
  % Obsolete chunk to_int_of_int1
  % to_int_of_int1: LEMMA FORALL (m:mode, i:int): in_safe_int_range1(i) =>
  %   (to_int1(m, of_int1(m, i)) = i)
  
  % Obsolete chunk eq_to_int1
  % eq_to_int1: LEMMA FORALL (m:mode, x:t1, y:t1): tqtisfinite1(x) =>
  %   (infix_dteq1(x, y) => (to_int1(m, x) = to_int1(m, y)))
  
  % Obsolete chunk neg_to_int1
  % neg_to_int1: LEMMA FORALL (m:mode, x:t1): is_int1(x) => (to_int1(m,
  %   neg1(x)) = (-to_int1(m, x)))
  
  % Obsolete chunk roundtointegral_is_finite1
  % roundtointegral_is_finite1: LEMMA FORALL (m:mode, x:t1): tqtisfinite1(x) =>
  %   tqtisfinite1(roundtointegral1(m, x))
  
  % Obsolete chunk round_bound_ne1
  % round_bound_ne1: LEMMA FORALL (x:real): no_overflow1(rne, x) =>
  %   ((((x - ((1 / 9007199254740992) * abs(x))) - (1 / 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568)) <= round1(rne,
  %   x)) AND (round1(rne,
  %   x) <= ((x + ((1 / 9007199254740992) * abs(x))) + (1 / 404804506614621236704990693437834614099113299528284236713802716054860679135990693783920767402874248990374155728633623822779617474771586953734026799881477019843034848553132722728933815484186432682479535356945490137124014966849385397236206711298319112681620113024717539104666829230461005064372655017292012526615415482186989568))))
  
  % Obsolete chunk round_bound1
  % round_bound1: LEMMA FORALL (m:mode, x:real): no_overflow1(m, x) =>
  %   ((((x - ((1 / 4503599627370496) * abs(x))) - (1 / 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784)) <= round1(m,
  %   x)) AND (round1(m,
  %   x) <= ((x + ((1 / 4503599627370496) * abs(x))) + (1 / 202402253307310618352495346718917307049556649764142118356901358027430339567995346891960383701437124495187077864316811911389808737385793476867013399940738509921517424276566361364466907742093216341239767678472745068562007483424692698618103355649159556340810056512358769552333414615230502532186327508646006263307707741093494784))))
  
  % Obsolete chunk rounding_mode
  % rounding_mode: DATATYPE
  %  BEGIN
  %   up: up?
  %   down: down?
  %   tozero: tozero?
  %   nearesttiestoaway: nearesttiestoaway?
  %   nearesttiestoeven: nearesttiestoeven?
  %  END rounding_mode
  
  % Obsolete chunk float_kind
  % float_kind: DATATYPE
  %  BEGIN
  %   finite: finite?
  %   nan: nan?
  %   inf_pos: inf_pos?
  %   inf_neg: inf_neg?
  %  END float_kind
  
  % Obsolete chunk classify_f32
  % classify_f32(x:single): float_kind
  
  % Obsolete chunk classify_f64
  % classify_f64(x:double): float_kind
  
  % Obsolete chunk finite1
  % finite1(x:real): bool = finite_single?(round_single(x)) AND
  %   finite_double?(round_double(x))
  
  % Obsolete chunk max_f32
  % max_f32: real = 340282346600000016151267322115014000640
  
  % Obsolete chunk max_f64
  % max_f64: real =
  %   179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368
  
 END Cfloat
 