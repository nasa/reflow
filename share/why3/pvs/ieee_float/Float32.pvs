Float32: THEORY
 BEGIN
  IMPORTING int@Int
  IMPORTING real@Real
  IMPORTING real@RealInfix
  IMPORTING real@Abs
  IMPORTING real@FromInt
  IMPORTING real@Truncate
  IMPORTING real@Square
  IMPORTING bv@Pow2int
  IMPORTING RoundingMode
  % do not edit above this line
  % surround new declarations you insert below with blank lines
  
  % Why3 string
  string: TYPE+
  
  %M3: Added by hand
  IMPORTING interface__stdlib__ieee_float__float32__nasalib__float__single
  
  % Why3 unit
  unit: TYPE+ = []
  
  % Why3 tqtaxiom
  tqtaxiom: LEMMA FORALL (x:single): finite?_single(x) =>
    (((-340282346638528859811704183484516925440) <= safe_proj_single(x)) AND
    (safe_proj_single(x) <= 340282346638528859811704183484516925440))
  
  % Why3 pow2sb
  pow2sb: int = 16777216
  
  % Why3 max_real
  max_real: real = (33554430 * 10141204801825835211973625643008)
  
  % Why3 fma
  fma(x:RoundingMode.mode, x1:single, x2:single, x3:single): single
  
  % Why3 prefix_dtmn
  prefix_dtmn(x:single): single = neg_single(x)
  
  % Why3 infix_dtpl
  infix_dtpl(x:single, y:single): single = add_single(x,y)
  
  % Why3 infix_dtmn
  infix_dtmn(x:single, y:single): single = sub_single(x,y)
  
  % Why3 infix_dtas
  infix_dtas(x:single, y:single): single = mul_single(x,y)
  
  % Why3 infix_dtsl
  infix_dtsl(x:single, y:single): single = div_single(x,y)
  
  % Why3 roundtointegral
  roundtointegral(x:RoundingMode.mode, x1:single): single
  
  % Why3 infix_dtlseq
  infix_dtlseq(x:single, y:single): bool = qle_single(x,y)
  
  % Why3 infix_dtls
  infix_dtls(x:single, y:single): bool = qlt_single(x,y)
  
  % Why3 infix_dtgteq
  infix_dtgteq(x:single, y:single): bool = qge_single(x,y)
  
  % Why3 infix_dtgt
  infix_dtgt(x:single, y:single): bool = qgt_single(x,y)
  
  % Why3 infix_dteq
  infix_dteq(x:single, y:single): bool = qeq_single(x,y)
  
  % Why3 is_infinite
  is_infinite(x:single): bool
  
  % Why3 is_plus_infinity
  is_plus_infinity(x:single): bool = is_infinite(x) AND positive?_single(x)
  
  % Why3 is_minus_infinity
  is_minus_infinity(x:single): bool = is_infinite(x) AND negative?_single(x)
  
  % Why3 is_plus_zero
  is_plus_zero(x:single): bool = zero?_single(x) AND positive?_single(x)
  
  % Why3 is_minus_zero
  is_minus_zero(x:single): bool = zero?_single(x) AND negative?_single(x)
  
  % Why3 is_not_nan
  is_not_nan(x:single): bool = finite?_single(x) OR is_infinite(x)
  
  % Why3 of_int
  of_int(x:RoundingMode.mode, x1:int): single
  
  % Why3 to_int
  to_int(x:RoundingMode.mode, x1:single): int
  
  % Why3 max_int
  max_int: int
  
  % Why3 emax
  emax: int = expt_safe(2,(ieee754_single_exponent_size - 1))
  
  % Why3 in_range
  in_range(x:real): bool = ((-max_real) <= x) AND (x <= max_real)
  
  % Why3 in_int_range
  in_int_range(i:int): bool = ((-max_int) <= i) AND (i <= max_int)
  
  % Why3 no_overflow
  no_overflow(m:RoundingMode.mode, x:real): bool =
    in_range(proj_single(round_single(x)))
  
  % Why3 in_safe_int_range
  in_safe_int_range(i:int): bool = ((-pow2sb) <= i) AND (i <= pow2sb)
  
  % Why3 same_sign
  same_sign(x:single, y:single): bool = (positive?_single(x) AND
    positive?_single(y)) OR (negative?_single(x) AND negative?_single(y))
  
  % Why3 diff_sign
  diff_sign(x:single, y:single): bool = (positive?_single(x) AND
    negative?_single(y)) OR (negative?_single(x) AND positive?_single(y))
  
  % Why3 product_sign
  product_sign(z:single, x:single, y:single): bool = (same_sign(x, y) =>
    positive?_single(z)) AND (diff_sign(x, y) => negative?_single(z))
  
  % Why3 same_sign_real
  same_sign_real(x:single, r:real): bool = (positive?_single(x) AND
    (r >  0)) OR (negative?_single(x) AND (r <  0))
  
  % Why3 is_int
  is_int(x:single): bool
  
  
 END Float32
 